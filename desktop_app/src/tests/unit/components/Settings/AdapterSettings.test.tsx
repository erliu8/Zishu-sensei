/**
 * ÈÄÇÈÖçÂô®ËÆæÁΩÆÁªÑ‰ª∂ÊµãËØï
 * 
 * ÊµãËØï‰∏ªË¶ÅÂäüËÉΩÔºö
 * - üì¶ ÈÄÇÈÖçÂô®ÂàóË°®Â±ïÁ§∫ÂíåÁÆ°ÁêÜ
 * - ‚ö° ÈÄÇÈÖçÂô®ÂêØÁî®/Á¶ÅÁî®ÊéßÂà∂
 * - üîß ÈÄÇÈÖçÂô®ÂèÇÊï∞ÈÖçÁΩÆ
 * - üì• ÈÄÇÈÖçÂô®ÂÆâË£ÖÂíåÂç∏ËΩΩ
 * - üîÑ ÈÄÇÈÖçÂô®Êõ¥Êñ∞Ê£ÄÊü•
 * - üõ†Ô∏è ÈÄÇÈÖçÂô®Ë∞ÉËØïÂ∑•ÂÖ∑
 * - üìä ÈÄÇÈÖçÂô®ÊÄßËÉΩÁõëÊéß
 * - üîí ÈÄÇÈÖçÂô®ÊùÉÈôêÁÆ°ÁêÜ
 * 
 * @module Tests/Components/Settings/AdapterSettings
 */

import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'
import { render, screen, fireEvent, waitFor, within } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { TestProvider } from '@/tests/utils/test-utils'
import { 
  createMockUseSettings, 
  createMockUseTauri,
  createMockAdapterSettings,
  mockToast 
} from '@/tests/mocks/settings-mocks'
import { createMockAdapter, createMockAdapterList } from '@/tests/mocks/factories'

// Ê®°Êãü‰æùËµñ
vi.mock('@/hooks/useSettings')
vi.mock('@/hooks/useTauri')
vi.mock('@/hooks/useAdapter')
vi.mock('react-hot-toast', () => ({ default: mockToast }))
vi.mock('framer-motion', () => ({
  motion: {
    div: vi.fn(({ children, ...props }) => <div {...props}>{children}</div>),
    section: vi.fn(({ children, ...props }) => <section {...props}>{children}</section>)
  }
}))

// Mock useAdapter Hook
const mockUseAdapter = {
  adapters: [
    {
      id: 'openai-adapter',
      name: 'OpenAI Adapter',
      version: '1.2.0',
      enabled: true,
      status: 'running',
      config: {
        apiKey: '***hidden***',
        model: 'gpt-3.5-turbo',
        maxTokens: 2000
      },
      author: 'Zishu Team',
      description: 'OpenAI GPT Ê®°ÂûãÈÄÇÈÖçÂô®'
    },
    {
      id: 'claude-adapter',
      name: 'Claude Adapter',
      version: '1.0.5',
      enabled: false,
      status: 'stopped',
      config: {
        apiKey: '',
        model: 'claude-3-sonnet'
      },
      author: 'Community',
      description: 'Anthropic Claude Ê®°ÂûãÈÄÇÈÖçÂô®'
    }
  ],
  availableAdapters: [
    {
      id: 'gemini-adapter',
      name: 'Gemini Adapter',
      version: '1.1.0',
      author: 'Google',
      description: 'Google Gemini Ê®°ÂûãÈÄÇÈÖçÂô®',
      downloadUrl: 'https://adapters.zishu.com/gemini-adapter.zip'
    }
  ],
  installingAdapters: [],
  isLoading: false,
  error: null,
  
  installAdapter: vi.fn(),
  uninstallAdapter: vi.fn(),
  enableAdapter: vi.fn(),
  disableAdapter: vi.fn(),
  updateAdapter: vi.fn(),
  configureAdapter: vi.fn(),
  restartAdapter: vi.fn(),
  getAdapterLogs: vi.fn(),
  validateAdapterConfig: vi.fn(),
  searchAdapters: vi.fn(),
  checkUpdates: vi.fn()
}

vi.mock('@/hooks/useAdapter', () => ({
  useAdapter: () => mockUseAdapter
}))

// ÂØºÂÖ•Ë¶ÅÊµãËØïÁöÑÁªÑ‰ª∂
import { AdapterSettings } from '@/components/Settings/AdapterSettings'
import { useSettings } from '@/hooks/useSettings'
import { useTauri } from '@/hooks/useTauri'

describe('AdapterSettings - ÈÄÇÈÖçÂô®ËÆæÁΩÆÁªÑ‰ª∂', () => {
  let mockUseSettings: ReturnType<typeof createMockUseSettings>
  let mockUseTauri: ReturnType<typeof createMockUseTauri>
  let user: ReturnType<typeof userEvent.setup>
  let mockAdapterSettings: ReturnType<typeof createMockAdapterSettings>
  let mockOnSettingsChange: ReturnType<typeof vi.fn>

  beforeEach(() => {
    mockUseSettings = createMockUseSettings()
    mockUseTauri = createMockUseTauri()
    mockAdapterSettings = createMockAdapterSettings()
    mockOnSettingsChange = vi.fn()
    user = userEvent.setup()

    vi.mocked(useSettings).mockReturnValue(mockUseSettings)
    vi.mocked(useTauri).mockReturnValue(mockUseTauri)
    
    vi.clearAllMocks()
  })

  afterEach(() => {
    vi.resetAllMocks()
  })

  const renderAdapterSettings = (overrideProps = {}) => {
    const defaultProps = {
      adapterSettings: mockAdapterSettings,
      onSettingsChange: mockOnSettingsChange,
      ...overrideProps
    }
    
    return render(
      <TestProvider>
        <AdapterSettings {...defaultProps} />
      </TestProvider>
    )
  }

  // ==================== Ê∏≤ÊüìÊµãËØï ====================

  describe('Ê∏≤ÊüìÊµãËØï', () => {
    it('Â∫îËØ•Ê≠£Á°ÆÊ∏≤ÊüìÈÄÇÈÖçÂô®ËÆæÁΩÆÁªÑ‰ª∂', () => {
      renderAdapterSettings()

      expect(screen.getByText('Â∑≤ÂÆâË£ÖÈÄÇÈÖçÂô®')).toBeInTheDocument()
      expect(screen.getByText('ÈÄÇÈÖçÂô®Â∏ÇÂú∫')).toBeInTheDocument()
      expect(screen.getByText('ÂÖ®Â±ÄÈÖçÁΩÆ')).toBeInTheDocument()
    })

    it('Â∫îËØ•ÊòæÁ§∫ÈÄÇÈÖçÂô®ÁªüËÆ°‰ø°ÊÅØ', () => {
      renderAdapterSettings()

      expect(screen.getByText('ÈÄÇÈÖçÂô®Ê¶ÇËßà')).toBeInTheDocument()
      expect(screen.getByText(/ÂÖ± \d+ ‰∏™ÈÄÇÈÖçÂô®/)).toBeInTheDocument()
      expect(screen.getByText(/\d+ ‰∏™ËøêË°å‰∏≠/)).toBeInTheDocument()
    })

    it('Â∫îËØ•Â∫îÁî®Ëá™ÂÆö‰πâÊ†∑ÂºèÁ±ªÂêç', () => {
      const { container } = renderAdapterSettings({ className: 'custom-adapter-settings' })
      
      expect(container.firstChild).toHaveClass('custom-adapter-settings')
    })
  })

  // ==================== ÈÄÇÈÖçÂô®ÂàóË°®ÊµãËØï ====================

  describe('ÈÄÇÈÖçÂô®ÂàóË°®ÊµãËØï', () => {
    it('Â∫îËØ•ÊòæÁ§∫Â∑≤ÂÆâË£ÖÈÄÇÈÖçÂô®ÂàóË°®', () => {
      renderAdapterSettings()

      expect(screen.getByText('OpenAI Adapter')).toBeInTheDocument()
      expect(screen.getByText('Claude Adapter')).toBeInTheDocument()
    })

    it('Â∫îËØ•ÊòæÁ§∫ÈÄÇÈÖçÂô®Âü∫Êú¨‰ø°ÊÅØ', () => {
      renderAdapterSettings()

      expect(screen.getByText('1.2.0')).toBeInTheDocument()
      expect(screen.getByText('Zishu Team')).toBeInTheDocument()
      expect(screen.getByText('OpenAI GPT Ê®°ÂûãÈÄÇÈÖçÂô®')).toBeInTheDocument()
    })

    it('Â∫îËØ•ÊòæÁ§∫ÈÄÇÈÖçÂô®Áä∂ÊÄÅ', () => {
      renderAdapterSettings()

      expect(screen.getByText('ËøêË°å‰∏≠')).toBeInTheDocument()
      expect(screen.getByText('Â∑≤ÂÅúÊ≠¢')).toBeInTheDocument()
    })

    it('Â∫îËØ•ÊòæÁ§∫ÈÄÇÈÖçÂô®ÂêØÁî®ÂºÄÂÖ≥', () => {
      renderAdapterSettings()

      const switches = screen.getAllByRole('switch')
      expect(switches).toHaveLength(2)
    })

    it('Â∫îËØ•ÂêØÁî®/Á¶ÅÁî®ÈÄÇÈÖçÂô®', async () => {
      renderAdapterSettings()

      const enableSwitch = screen.getAllByRole('switch')[1] // ClaudeÈÄÇÈÖçÂô®
      await user.click(enableSwitch)

      expect(mockUseAdapter.enableAdapter).toHaveBeenCalledWith('claude-adapter')
    })

    it('Â∫îËØ•ËøáÊª§ÈÄÇÈÖçÂô®ÂàóË°®', async () => {
      renderAdapterSettings()

      const searchInput = screen.getByPlaceholderText('ÊêúÁ¥¢ÈÄÇÈÖçÂô®...')
      await user.type(searchInput, 'OpenAI')

      expect(screen.getByText('OpenAI Adapter')).toBeInTheDocument()
      expect(screen.queryByText('Claude Adapter')).not.toBeInTheDocument()
    })

    it('Â∫îËØ•ÊåâÁä∂ÊÄÅÁ≠õÈÄâÈÄÇÈÖçÂô®', async () => {
      renderAdapterSettings()

      const statusFilter = screen.getByLabelText('Áä∂ÊÄÅÁ≠õÈÄâ')
      await user.selectOptions(statusFilter, 'running')

      expect(screen.getByText('OpenAI Adapter')).toBeInTheDocument()
      expect(screen.queryByText('Claude Adapter')).not.toBeInTheDocument()
    })

    it('Â∫îËØ•ÊéíÂ∫èÈÄÇÈÖçÂô®ÂàóË°®', async () => {
      renderAdapterSettings()

      const sortSelect = screen.getByLabelText('ÊéíÂ∫èÊñπÂºè')
      await user.selectOptions(sortSelect, 'name')

      // È™åËØÅÊéíÂ∫èÂêéÁöÑÈ°∫Â∫è
      const adapterItems = screen.getAllByTestId(/adapter-item/)
      expect(adapterItems[0]).toHaveTextContent('Claude Adapter')
      expect(adapterItems[1]).toHaveTextContent('OpenAI Adapter')
    })
  })

  // ==================== ÈÄÇÈÖçÂô®Êìç‰ΩúÊµãËØï ====================

  describe('ÈÄÇÈÖçÂô®Êìç‰ΩúÊµãËØï', () => {
    it('Â∫îËØ•ÈÖçÁΩÆÈÄÇÈÖçÂô®', async () => {
      renderAdapterSettings()

      const configButton = screen.getAllByText('ÈÖçÁΩÆ')[0]
      await user.click(configButton)

      expect(screen.getByText('ÈÄÇÈÖçÂô®ÈÖçÁΩÆ')).toBeInTheDocument()
    })

    it('Â∫îËØ•ÈáçÂêØÈÄÇÈÖçÂô®', async () => {
      renderAdapterSettings()

      const restartButton = screen.getAllByText('ÈáçÂêØ')[0]
      await user.click(restartButton)

      expect(mockUseAdapter.restartAdapter).toHaveBeenCalledWith('openai-adapter')
    })

    it('Â∫îËØ•Âç∏ËΩΩÈÄÇÈÖçÂô®', async () => {
      const confirmSpy = vi.spyOn(window, 'confirm').mockReturnValue(true)

      renderAdapterSettings()

      const uninstallButton = screen.getAllByText('Âç∏ËΩΩ')[0]
      await user.click(uninstallButton)

      expect(confirmSpy).toHaveBeenCalledWith('Á°ÆÂÆöË¶ÅÂç∏ËΩΩ OpenAI Adapter ÂêóÔºüÊ≠§Êìç‰Ωú‰∏çÂèØÊÅ¢Â§ç„ÄÇ')
      expect(mockUseAdapter.uninstallAdapter).toHaveBeenCalledWith('openai-adapter')

      confirmSpy.mockRestore()
    })

    it('Â∫îËØ•Êõ¥Êñ∞ÈÄÇÈÖçÂô®', async () => {
      renderAdapterSettings()

      const updateButton = screen.getAllByText('Êõ¥Êñ∞')[0]
      await user.click(updateButton)

      expect(mockUseAdapter.updateAdapter).toHaveBeenCalledWith('openai-adapter')
    })

    it('Â∫îËØ•Êü•ÁúãÈÄÇÈÖçÂô®Êó•Âøó', async () => {
      renderAdapterSettings()

      const logsButton = screen.getAllByText('Êó•Âøó')[0]
      await user.click(logsButton)

      expect(mockUseAdapter.getAdapterLogs).toHaveBeenCalledWith('openai-adapter')
    })

    it('Â∫îËØ•Ê£ÄÊü•ÈÄÇÈÖçÂô®Êõ¥Êñ∞', async () => {
      renderAdapterSettings()

      const checkUpdatesButton = screen.getByText('Ê£ÄÊü•Êõ¥Êñ∞')
      await user.click(checkUpdatesButton)

      expect(mockUseAdapter.checkUpdates).toHaveBeenCalled()
    })
  })

  // ==================== ÈÄÇÈÖçÂô®ÈÖçÁΩÆÊµãËØï ====================

  describe('ÈÄÇÈÖçÂô®ÈÖçÁΩÆÊµãËØï', () => {
    it('Â∫îËØ•ÊòæÁ§∫ÈÖçÁΩÆÂØπËØùÊ°Ü', async () => {
      renderAdapterSettings()

      const configButton = screen.getAllByText('ÈÖçÁΩÆ')[0]
      await user.click(configButton)

      expect(screen.getByRole('dialog')).toBeInTheDocument()
      expect(screen.getByText('OpenAI Adapter ÈÖçÁΩÆ')).toBeInTheDocument()
    })

    it('Â∫îËØ•ÊòæÁ§∫ÈÖçÁΩÆË°®ÂçïÂ≠óÊÆµ', async () => {
      renderAdapterSettings()

      const configButton = screen.getAllByText('ÈÖçÁΩÆ')[0]
      await user.click(configButton)

      expect(screen.getByLabelText('API Key')).toBeInTheDocument()
      expect(screen.getByLabelText('Ê®°Âûã')).toBeInTheDocument()
      expect(screen.getByLabelText('ÊúÄÂ§ßTokenÊï∞')).toBeInTheDocument()
    })

    it('Â∫îËØ•ÊòæÁ§∫ÂΩìÂâçÈÖçÁΩÆÂÄº', async () => {
      renderAdapterSettings()

      const configButton = screen.getAllByText('ÈÖçÁΩÆ')[0]
      await user.click(configButton)

      const modelSelect = screen.getByLabelText('Ê®°Âûã') as HTMLSelectElement
      expect(modelSelect.value).toBe('gpt-3.5-turbo')

      const maxTokensInput = screen.getByLabelText('ÊúÄÂ§ßTokenÊï∞') as HTMLInputElement
      expect(maxTokensInput.value).toBe('2000')
    })

    it('Â∫îËØ•Êõ¥Êñ∞ÈÖçÁΩÆÂÄº', async () => {
      renderAdapterSettings()

      const configButton = screen.getAllByText('ÈÖçÁΩÆ')[0]
      await user.click(configButton)

      const maxTokensInput = screen.getByLabelText('ÊúÄÂ§ßTokenÊï∞')
      await user.clear(maxTokensInput)
      await user.type(maxTokensInput, '4000')

      const saveButton = screen.getByText('‰øùÂ≠òÈÖçÁΩÆ')
      await user.click(saveButton)

      expect(mockUseAdapter.configureAdapter).toHaveBeenCalledWith('openai-adapter', {
        apiKey: '***hidden***',
        model: 'gpt-3.5-turbo',
        maxTokens: 4000
      })
    })

    it('Â∫îËØ•È™åËØÅÈÖçÁΩÆÂÄº', async () => {
      renderAdapterSettings()

      const configButton = screen.getAllByText('ÈÖçÁΩÆ')[0]
      await user.click(configButton)

      const maxTokensInput = screen.getByLabelText('ÊúÄÂ§ßTokenÊï∞')
      await user.clear(maxTokensInput)
      await user.type(maxTokensInput, 'invalid')

      expect(screen.getByText('ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÊï∞Â≠ó')).toBeInTheDocument()
    })

    it('Â∫îËØ•ÊµãËØïÈÖçÁΩÆËøûÊé•', async () => {
      renderAdapterSettings()

      const configButton = screen.getAllByText('ÈÖçÁΩÆ')[0]
      await user.click(configButton)

      const testButton = screen.getByText('ÊµãËØïËøûÊé•')
      await user.click(testButton)

      expect(mockUseTauri.commands.test_adapter_connection).toHaveBeenCalledWith('openai-adapter')
    })

    it('Â∫îËØ•ÈáçÁΩÆÈÖçÁΩÆÂà∞ÈªòËÆ§ÂÄº', async () => {
      const confirmSpy = vi.spyOn(window, 'confirm').mockReturnValue(true)

      renderAdapterSettings()

      const configButton = screen.getAllByText('ÈÖçÁΩÆ')[0]
      await user.click(configButton)

      const resetButton = screen.getByText('ÈáçÁΩÆÈªòËÆ§')
      await user.click(resetButton)

      expect(confirmSpy).toHaveBeenCalledWith('Á°ÆÂÆöË¶ÅÈáçÁΩÆÈÖçÁΩÆÂà∞ÈªòËÆ§ÂÄºÂêóÔºü')

      confirmSpy.mockRestore()
    })

    it('Â∫îËØ•ÂèñÊ∂àÈÖçÁΩÆÊõ¥Êîπ', async () => {
      renderAdapterSettings()

      const configButton = screen.getAllByText('ÈÖçÁΩÆ')[0]
      await user.click(configButton)

      const cancelButton = screen.getByText('ÂèñÊ∂à')
      await user.click(cancelButton)

      expect(screen.queryByRole('dialog')).not.toBeInTheDocument()
    })
  })

  // ==================== ÈÄÇÈÖçÂô®Â∏ÇÂú∫ÊµãËØï ====================

  describe('ÈÄÇÈÖçÂô®Â∏ÇÂú∫ÊµãËØï', () => {
    it('Â∫îËØ•ÊòæÁ§∫ÂèØÁî®ÈÄÇÈÖçÂô®', () => {
      renderAdapterSettings()

      expect(screen.getByText('Gemini Adapter')).toBeInTheDocument()
    })

    it('Â∫îËØ•ÊêúÁ¥¢Â∏ÇÂú∫ÈÄÇÈÖçÂô®', async () => {
      renderAdapterSettings()

      const marketSearchInput = screen.getByPlaceholderText('ÊêúÁ¥¢Â∏ÇÂú∫ÈÄÇÈÖçÂô®...')
      await user.type(marketSearchInput, 'Gemini')

      expect(mockUseAdapter.searchAdapters).toHaveBeenCalledWith('Gemini')
    })

    it('Â∫îËØ•ÂÆâË£ÖÂ∏ÇÂú∫ÈÄÇÈÖçÂô®', async () => {
      renderAdapterSettings()

      const installButton = screen.getByText('ÂÆâË£Ö')
      await user.click(installButton)

      expect(mockUseAdapter.installAdapter).toHaveBeenCalledWith('gemini-adapter')
    })

    it('Â∫îËØ•ÊòæÁ§∫ÂÆâË£ÖËøõÂ∫¶', () => {
      mockUseAdapter.installingAdapters = ['gemini-adapter']

      renderAdapterSettings()

      expect(screen.getByText(/ÂÆâË£Ö‰∏≠/i)).toBeInTheDocument()
      expect(screen.getByRole('progressbar')).toBeInTheDocument()
    })

    it('Â∫îËØ•ÂèñÊ∂àÂÆâË£Ö', async () => {
      mockUseAdapter.installingAdapters = ['gemini-adapter']

      renderAdapterSettings()

      const cancelButton = screen.getByText('ÂèñÊ∂àÂÆâË£Ö')
      await user.click(cancelButton)

      expect(mockUseTauri.commands.cancel_adapter_installation).toHaveBeenCalledWith('gemini-adapter')
    })

    it('Â∫îËØ•ÊòæÁ§∫ÈÄÇÈÖçÂô®ËØ¶ÊÉÖ', async () => {
      renderAdapterSettings()

      const detailsButton = screen.getByText('ËØ¶ÊÉÖ')
      await user.click(detailsButton)

      expect(screen.getByText('ÈÄÇÈÖçÂô®ËØ¶ÊÉÖ')).toBeInTheDocument()
      expect(screen.getByText('Google Gemini Ê®°ÂûãÈÄÇÈÖçÂô®')).toBeInTheDocument()
    })

    it('Â∫îËØ•ÊåâÁ±ªÂà´Á≠õÈÄâÂ∏ÇÂú∫ÈÄÇÈÖçÂô®', async () => {
      renderAdapterSettings()

      const categoryFilter = screen.getByLabelText('ÈÄÇÈÖçÂô®Á±ªÂà´')
      await user.selectOptions(categoryFilter, 'ai-model')

      expect(mockUseAdapter.searchAdapters).toHaveBeenCalledWith('', { category: 'ai-model' })
    })

    it('Â∫îËØ•Âà∑Êñ∞Â∏ÇÂú∫ÈÄÇÈÖçÂô®', async () => {
      renderAdapterSettings()

      const refreshButton = screen.getByText('Âà∑Êñ∞Â∏ÇÂú∫')
      await user.click(refreshButton)

      expect(mockUseAdapter.searchAdapters).toHaveBeenCalledWith('')
    })
  })

  // ==================== ÂÖ®Â±ÄÈÖçÁΩÆÊµãËØï ====================

  describe('ÂÖ®Â±ÄÈÖçÁΩÆÊµãËØï', () => {
    it('Â∫îËØ•ÊòæÁ§∫ÂÖ®Â±ÄÈÄÇÈÖçÂô®ËÆæÁΩÆ', () => {
      renderAdapterSettings()

      expect(screen.getByText('ÂÖ®Â±ÄÈÖçÁΩÆ')).toBeInTheDocument()
      expect(screen.getByLabelText('Ëá™Âä®Êõ¥Êñ∞')).toBeInTheDocument()
      expect(screen.getByLabelText('ÈîôËØØÈáçËØï')).toBeInTheDocument()
    })

    it('Â∫îËØ•ÂàáÊç¢Ëá™Âä®Êõ¥Êñ∞', async () => {
      renderAdapterSettings()

      const autoUpdateSwitch = screen.getByLabelText('Ëá™Âä®Êõ¥Êñ∞')
      await user.click(autoUpdateSwitch)

      expect(mockOnSettingsChange).toHaveBeenCalledWith({
        ...mockAdapterSettings,
        global: {
          ...mockAdapterSettings.global,
          autoUpdate: true
        }
      })
    })

    it('Â∫îËØ•ËÆæÁΩÆÊõ¥Êñ∞Ê£ÄÊü•Èó¥Èöî', async () => {
      renderAdapterSettings()

      const intervalSelect = screen.getByLabelText('Ê£ÄÊü•Èó¥Èöî')
      await user.selectOptions(intervalSelect, '24')

      expect(mockOnSettingsChange).toHaveBeenCalledWith({
        ...mockAdapterSettings,
        global: {
          ...mockAdapterSettings.global,
          updateCheckInterval: 24
        }
      })
    })

    it('Â∫îËØ•ËÆæÁΩÆÊúÄÂ§ßÂπ∂ÂèëÈÄÇÈÖçÂô®Êï∞', async () => {
      renderAdapterSettings()

      const concurrentSlider = screen.getByLabelText('ÊúÄÂ§ßÂπ∂ÂèëÊï∞')
      fireEvent.change(concurrentSlider, { target: { value: '5' } })

      expect(mockOnSettingsChange).toHaveBeenCalledWith({
        ...mockAdapterSettings,
        global: {
          ...mockAdapterSettings.global,
          maxConcurrent: 5
        }
      })
    })

    it('Â∫îËØ•ËÆæÁΩÆË∂ÖÊó∂Êó∂Èó¥', async () => {
      renderAdapterSettings()

      const timeoutInput = screen.getByLabelText('ËØ∑Ê±ÇË∂ÖÊó∂ÔºàÁßíÔºâ')
      await user.clear(timeoutInput)
      await user.type(timeoutInput, '60')

      expect(mockOnSettingsChange).toHaveBeenCalledWith({
        ...mockAdapterSettings,
        global: {
          ...mockAdapterSettings.global,
          requestTimeout: 60
        }
      })
    })

    it('Â∫îËØ•ËÆæÁΩÆÊó•ÂøóÁ∫ßÂà´', async () => {
      renderAdapterSettings()

      const logLevelSelect = screen.getByLabelText('Êó•ÂøóÁ∫ßÂà´')
      await user.selectOptions(logLevelSelect, 'debug')

      expect(mockOnSettingsChange).toHaveBeenCalledWith({
        ...mockAdapterSettings,
        global: {
          ...mockAdapterSettings.global,
          logLevel: 'debug'
        }
      })
    })
  })

  // ==================== ÊÄßËÉΩÁõëÊéßÊµãËØï ====================

  describe('ÊÄßËÉΩÁõëÊéßÊµãËØï', () => {
    it('Â∫îËØ•ÊòæÁ§∫ÈÄÇÈÖçÂô®ÊÄßËÉΩÁªüËÆ°', () => {
      renderAdapterSettings()

      expect(screen.getByText('ÊÄßËÉΩÁõëÊéß')).toBeInTheDocument()
      expect(screen.getByText('CPU‰ΩøÁî®Áéá')).toBeInTheDocument()
      expect(screen.getByText('ÂÜÖÂ≠ò‰ΩøÁî®')).toBeInTheDocument()
    })

    it('Â∫îËØ•ÊòæÁ§∫ËØ∑Ê±ÇÁªüËÆ°', () => {
      renderAdapterSettings()

      expect(screen.getByText('ËØ∑Ê±ÇÁªüËÆ°')).toBeInTheDocument()
      expect(screen.getByText('‰ªäÊó•ËØ∑Ê±Ç')).toBeInTheDocument()
      expect(screen.getByText('ÊàêÂäüÁéá')).toBeInTheDocument()
    })

    it('Â∫îËØ•ÊòæÁ§∫ÂÆûÊó∂ÊÄßËÉΩÂõæË°®', () => {
      renderAdapterSettings()

      expect(screen.getByTestId('performance-chart')).toBeInTheDocument()
    })

    it('Â∫îËØ•ÂàáÊç¢ÊÄßËÉΩÁõëÊéßÂºÄÂÖ≥', async () => {
      renderAdapterSettings()

      const monitoringSwitch = screen.getByLabelText('ÂêØÁî®ÊÄßËÉΩÁõëÊéß')
      await user.click(monitoringSwitch)

      expect(mockOnSettingsChange).toHaveBeenCalledWith({
        ...mockAdapterSettings,
        monitoring: {
          ...mockAdapterSettings.monitoring,
          enabled: true
        }
      })
    })

    it('Â∫îËØ•Ê∏ÖÁêÜÊÄßËÉΩÊï∞ÊçÆ', async () => {
      const confirmSpy = vi.spyOn(window, 'confirm').mockReturnValue(true)

      renderAdapterSettings()

      const clearButton = screen.getByText('Ê∏ÖÁêÜÊï∞ÊçÆ')
      await user.click(clearButton)

      expect(confirmSpy).toHaveBeenCalledWith('Á°ÆÂÆöË¶ÅÊ∏ÖÁêÜÊâÄÊúâÊÄßËÉΩÊï∞ÊçÆÂêóÔºü')

      confirmSpy.mockRestore()
    })
  })

  // ==================== ÈîôËØØÂ§ÑÁêÜÊµãËØï ====================

  describe('ÈîôËØØÂ§ÑÁêÜÊµãËØï', () => {
    it('Â∫îËØ•ÊòæÁ§∫ÈÄÇÈÖçÂô®ÈîôËØØÁä∂ÊÄÅ', () => {
      mockUseAdapter.adapters[0].status = 'error'

      renderAdapterSettings()

      expect(screen.getByText('ÈîôËØØ')).toBeInTheDocument()
    })

    it('Â∫îËØ•ÊòæÁ§∫ÂÆâË£ÖÈîôËØØ', () => {
      mockUseAdapter.error = new Error('ÈÄÇÈÖçÂô®ÂÆâË£ÖÂ§±Ë¥•')

      renderAdapterSettings()

      expect(screen.getByText('ÈÄÇÈÖçÂô®ÂÆâË£ÖÂ§±Ë¥•')).toBeInTheDocument()
    })

    it('Â∫îËØ•Â§ÑÁêÜÈÖçÁΩÆÈ™åËØÅÈîôËØØ', async () => {
      mockUseAdapter.validateAdapterConfig.mockResolvedValue({
        valid: false,
        errors: ['API Key ‰∏çËÉΩ‰∏∫Á©∫']
      })

      renderAdapterSettings()

      const configButton = screen.getAllByText('ÈÖçÁΩÆ')[0]
      await user.click(configButton)

      const saveButton = screen.getByText('‰øùÂ≠òÈÖçÁΩÆ')
      await user.click(saveButton)

      await waitFor(() => {
        expect(screen.getByText('API Key ‰∏çËÉΩ‰∏∫Á©∫')).toBeInTheDocument()
      })
    })

    it('Â∫îËØ•Â§ÑÁêÜÁΩëÁªúÈîôËØØ', () => {
      mockUseAdapter.error = new Error('ÁΩëÁªúËøûÊé•Â§±Ë¥•')

      renderAdapterSettings()

      expect(screen.getByText('ÁΩëÁªúËøûÊé•Â§±Ë¥•')).toBeInTheDocument()
      expect(screen.getByText('ÈáçËØï')).toBeInTheDocument()
    })

    it('Â∫îËØ•ÈáçËØïÂ§±Ë¥•ÁöÑÊìç‰Ωú', async () => {
      mockUseAdapter.error = new Error('ÁΩëÁªúËøûÊé•Â§±Ë¥•')

      renderAdapterSettings()

      const retryButton = screen.getByText('ÈáçËØï')
      await user.click(retryButton)

      expect(mockUseAdapter.searchAdapters).toHaveBeenCalled()
    })

    it('Â∫îËØ•ÊòæÁ§∫ÈÄÇÈÖçÂô®ÂÖºÂÆπÊÄßË≠¶Âëä', () => {
      mockUseAdapter.adapters[0].compatibility = 'warning'

      renderAdapterSettings()

      expect(screen.getByText(/ÂÖºÂÆπÊÄßË≠¶Âëä/i)).toBeInTheDocument()
    })
  })

  // ==================== ÂØºÂÖ•ÂØºÂá∫ÊµãËØï ====================

  describe('ÂØºÂÖ•ÂØºÂá∫ÊµãËØï', () => {
    it('Â∫îËØ•ÂØºÂá∫ÈÄÇÈÖçÂô®ÈÖçÁΩÆ', async () => {
      renderAdapterSettings()

      const exportButton = screen.getByText('ÂØºÂá∫ÈÖçÁΩÆ')
      await user.click(exportButton)

      expect(mockUseTauri.commands.export_adapter_settings).toHaveBeenCalled()
    })

    it('Â∫îËØ•ÂØºÂÖ•ÈÄÇÈÖçÂô®ÈÖçÁΩÆ', async () => {
      renderAdapterSettings()

      const importButton = screen.getByText('ÂØºÂÖ•ÈÖçÁΩÆ')
      await user.click(importButton)

      expect(mockUseTauri.commands.import_adapter_settings).toHaveBeenCalled()
    })

    it('Â∫îËØ•Â§á‰ªΩÂΩìÂâçÈÖçÁΩÆ', async () => {
      renderAdapterSettings()

      const backupButton = screen.getByText('Â§á‰ªΩÈÖçÁΩÆ')
      await user.click(backupButton)

      expect(mockUseTauri.commands.backup_adapter_settings).toHaveBeenCalled()
    })

    it('Â∫îËØ•ÊÅ¢Â§çÈÖçÁΩÆÂ§á‰ªΩ', async () => {
      const confirmSpy = vi.spyOn(window, 'confirm').mockReturnValue(true)

      renderAdapterSettings()

      const restoreButton = screen.getByText('ÊÅ¢Â§çÂ§á‰ªΩ')
      await user.click(restoreButton)

      expect(confirmSpy).toHaveBeenCalledWith('Á°ÆÂÆöË¶ÅÊÅ¢Â§çÈÖçÁΩÆÂ§á‰ªΩÂêóÔºüÂΩìÂâçÈÖçÁΩÆÂ∞ÜË¢´Ë¶ÜÁõñ„ÄÇ')

      confirmSpy.mockRestore()
    })

    it('Â∫îËØ•Â§ÑÁêÜÂØºÂÖ•È™åËØÅÈîôËØØ', async () => {
      mockUseTauri.commands.import_adapter_settings.mockRejectedValue(new Error('ÈÖçÁΩÆÊ†ºÂºèÊó†Êïà'))

      renderAdapterSettings()

      const importButton = screen.getByText('ÂØºÂÖ•ÈÖçÁΩÆ')
      await user.click(importButton)

      await waitFor(() => {
        expect(mockToast.error).toHaveBeenCalledWith('ÈÖçÁΩÆÂØºÂÖ•Â§±Ë¥•: ÈÖçÁΩÆÊ†ºÂºèÊó†Êïà')
      })
    })
  })

  // ==================== ÊâπÈáèÊìç‰ΩúÊµãËØï ====================

  describe('ÊâπÈáèÊìç‰ΩúÊµãËØï', () => {
    it('Â∫îËØ•ÈÄâÊã©Â§ö‰∏™ÈÄÇÈÖçÂô®', async () => {
      renderAdapterSettings()

      const checkboxes = screen.getAllByRole('checkbox')
      await user.click(checkboxes[0])
      await user.click(checkboxes[1])

      expect(screen.getByText('Â∑≤ÈÄâÊã© 2 ‰∏™ÈÄÇÈÖçÂô®')).toBeInTheDocument()
    })

    it('Â∫îËØ•ÂÖ®ÈÄâÈÄÇÈÖçÂô®', async () => {
      renderAdapterSettings()

      const selectAllButton = screen.getByText('ÂÖ®ÈÄâ')
      await user.click(selectAllButton)

      expect(screen.getByText('Â∑≤ÈÄâÊã© 2 ‰∏™ÈÄÇÈÖçÂô®')).toBeInTheDocument()
    })

    it('Â∫îËØ•ÊâπÈáèÂêØÁî®ÈÄÇÈÖçÂô®', async () => {
      renderAdapterSettings()

      // ÈÄâÊã©ÈÄÇÈÖçÂô®
      const checkboxes = screen.getAllByRole('checkbox')
      await user.click(checkboxes[0])
      await user.click(checkboxes[1])

      const batchEnableButton = screen.getByText('ÊâπÈáèÂêØÁî®')
      await user.click(batchEnableButton)

      expect(mockUseAdapter.enableAdapter).toHaveBeenCalledTimes(2)
    })

    it('Â∫îËØ•ÊâπÈáèÁ¶ÅÁî®ÈÄÇÈÖçÂô®', async () => {
      renderAdapterSettings()

      // ÈÄâÊã©ÈÄÇÈÖçÂô®
      const checkboxes = screen.getAllByRole('checkbox')
      await user.click(checkboxes[0])

      const batchDisableButton = screen.getByText('ÊâπÈáèÁ¶ÅÁî®')
      await user.click(batchDisableButton)

      expect(mockUseAdapter.disableAdapter).toHaveBeenCalledWith('openai-adapter')
    })

    it('Â∫îËØ•ÊâπÈáèÂç∏ËΩΩÈÄÇÈÖçÂô®', async () => {
      const confirmSpy = vi.spyOn(window, 'confirm').mockReturnValue(true)

      renderAdapterSettings()

      // ÈÄâÊã©ÈÄÇÈÖçÂô®
      const checkboxes = screen.getAllByRole('checkbox')
      await user.click(checkboxes[0])

      const batchUninstallButton = screen.getByText('ÊâπÈáèÂç∏ËΩΩ')
      await user.click(batchUninstallButton)

      expect(confirmSpy).toHaveBeenCalledWith('Á°ÆÂÆöË¶ÅÂç∏ËΩΩÈÄâ‰∏≠ÁöÑ 1 ‰∏™ÈÄÇÈÖçÂô®ÂêóÔºüÊ≠§Êìç‰Ωú‰∏çÂèØÊÅ¢Â§ç„ÄÇ')

      confirmSpy.mockRestore()
    })
  })
})
