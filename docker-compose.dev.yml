# Zishu-sensei 开发环境配置
# 用于本地开发，包含热重载、调试工具等
version: "3.8"

services:
  # API服务 - 开发模式
  zishu-api-dev:
    image: zishu-sensei-zishu-api:latest
    container_name: zishu-api-dev
    command:
      [
        "python",
        "-m",
        "uvicorn",
        "zishu.api.server:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
        "--reload",
        "--reload-dir",
        "/app/zishu",
      ]
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - MODEL_PATH=/app/models
      - CACHE_DIR=/app/cache
      - DATABASE_URL=postgresql://zishu:zishu123@postgres:5432/zishu
      - REDIS_URL=redis://:zishu123@redis:6379/0
      - QDRANT_URL=http://qdrant:6333
      - PYTHONPATH=/app
      - ZISHU_DEBUG=true
      - ZISHU_HOT_RELOAD=true
    volumes:
      # 源代码热重载
      - ./zishu:/app/zishu
      - ./config:/app/config
      - ./models:/app/models
      - ./cache:/app/cache
      - ./logs:/app/logs
      # 开发工具配置
      - ./.vscode:/app/.vscode:ro
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ./requirements.txt:/app/requirements.txt:ro
    depends_on:
      - postgres-dev
      - redis-dev
      - qdrant-dev
    networks:
      - zishu-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL数据库 - 开发版本
  postgres-dev:
    image: postgres:15-alpine
    container_name: zishu-postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=zishu_dev
      - POSTGRES_USER=zishu
      - POSTGRES_PASSWORD=zishu123
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./docker/postgres/01-init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql:ro
    networks:
      - zishu-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zishu -d zishu_dev"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Redis缓存 - 开发版本
  redis-dev:
    image: redis:7.2-alpine
    container_name: zishu-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    command: redis-server --appendonly yes --requirepass zishu123
    networks:
      - zishu-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Qdrant向量数据库 - 开发版本
  qdrant-dev:
    image: qdrant/qdrant:v1.7.0
    container_name: zishu-qdrant-dev
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_dev_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - zishu-dev-network
    restart: unless-stopped

  # Jupyter Lab - 开发和实验
  jupyter-dev:
    build:
      context: .
      dockerfile: docker/Dockerfile.jupyter
    container_name: zishu-jupyter-dev
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=dev-token
    volumes:
      - ./:/app/workspace
      - ./notebooks:/app/notebooks
      - ./training:/app/training
      - jupyter_dev_data:/home/jovyan/.jupyter
    networks:
      - zishu-dev-network
    restart: unless-stopped

  # pgAdmin - 数据库管理工具
  pgadmin-dev:
    image: dpage/pgadmin4:7.8
    container_name: zishu-pgadmin-dev
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@zishu.dev
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
    depends_on:
      - postgres-dev
    networks:
      - zishu-dev-network
    restart: unless-stopped

  # Redis Commander - Redis管理工具
  redis-commander-dev:
    image: rediscommander/redis-commander:latest
    container_name: zishu-redis-commander-dev
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis-dev:6379:0:zishu123
    depends_on:
      - redis-dev
    networks:
      - zishu-dev-network
    restart: unless-stopped

  # MailHog - 邮件测试工具
  mailhog-dev:
    image: mailhog/mailhog:v1.0.1
    container_name: zishu-mailhog-dev
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - zishu-dev-network
    restart: unless-stopped

  # 文件监控服务 - 用于热重载
  file-watcher:
    image: node:18-alpine
    container_name: zishu-file-watcher
    working_dir: /app
    command: >
      sh -c "
        npm install -g nodemon &&
        nodemon --watch /app/zishu --ext py,yml,yaml,json --exec 'echo File changed at $(date)'
      "
    volumes:
      - ./zishu:/app/zishu:ro
      - ./config:/app/config:ro
    networks:
      - zishu-dev-network
    restart: unless-stopped

networks:
  zishu-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  qdrant_dev_data:
    driver: local
  jupyter_dev_data:
    driver: local
  pgadmin_dev_data:
    driver: local
# 开发环境说明：
# 1. 所有服务都有 -dev 后缀，避免与生产环境冲突
# 2. API服务启用热重载，代码更改会自动重启
# 3. 包含开发工具：Jupyter Lab, pgAdmin, Redis Commander, MailHog
# 4. 数据库和缓存使用独立的开发数据卷
# 5. 所有端口都映射到主机，方便调试
