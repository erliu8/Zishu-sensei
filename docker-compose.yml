version: '3.8'

services:
  # API服务
  zishu-api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: zishu-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=${ZISHU_LOG_LEVEL:-INFO}
      - MODEL_PATH=${MODEL_PATH:-/app/models}
      - CACHE_DIR=${CACHE_DIR:-/app/cache}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
    volumes:
      - ./models:/app/models:ro
      - ./config:/app/config:ro
      - ./cache:/app/cache
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - zishu-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 向量数据库
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: zishu-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./data/qdrant:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - zishu-network
    restart: unless-stopped

  # Redis缓存
  redis:
    image: redis:7.2-alpine
    container_name: zishu-redis
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-zishu123}
    networks:
      - zishu-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: zishu-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=zishu
      - POSTGRES_USER=zishu
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-zishu123}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./docker/postgres/01-init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql:ro
    networks:
      - zishu-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zishu -d zishu"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Nginx反向代理
  nginx:
    image: nginx:1.25-alpine
    container_name: zishu-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - zishu-api
    networks:
      - zishu-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3

  # 监控服务 - Prometheus
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: zishu-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - zishu-network
    restart: unless-stopped

  # 监控仪表板 - Grafana
  grafana:
    image: grafana/grafana:10.2.0
    container_name: zishu-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - zishu-network
    restart: unless-stopped

  # 日志收集 - Loki
  loki:
    image: grafana/loki:2.9.0
    container_name: zishu-loki
    ports:
      - "3100:3100"
    volumes:
      - ./docker/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - ./data/loki:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - zishu-network
    restart: unless-stopped

  # 社区平台前端
  community-frontend:
    build:
      context: ./community_platform/frontend
      dockerfile: Dockerfile
    container_name: zishu-community-frontend
    ports:
      - "3001:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=development
    volumes:
      - ./community_platform/frontend:/app
      - /app/node_modules
    networks:
      - zishu-network
    restart: unless-stopped
    profiles:
      - community

  # 社区平台后端
  community-backend:
    build:
      context: ./community_platform/backend
      dockerfile: Dockerfile
    container_name: zishu-community-backend
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=postgresql://zishu:${POSTGRES_PASSWORD:-zishu123}@postgres:5432/zishu_community
      - REDIS_URL=redis://:${REDIS_PASSWORD:-zishu123}@redis:6379/1
    volumes:
      - ./community_platform/backend:/app
    depends_on:
      - postgres
      - redis
    networks:
      - zishu-network
    restart: unless-stopped
    profiles:
      - community

networks:
  zishu-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  prometheus_data:
  grafana_data:
  loki_data:

# 环境变量说明：
# 创建 .env 文件并设置以下变量：
# POSTGRES_PASSWORD=your_postgres_password
# REDIS_PASSWORD=your_redis_password  
# GRAFANA_PASSWORD=your_grafana_password
