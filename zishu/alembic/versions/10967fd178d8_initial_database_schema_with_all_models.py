"""Initial database schema with all models

Revision ID: 10967fd178d8
Revises: 
Create Date: 2025-10-22 14:50:43.403397

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '10967fd178d8'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('adapter_categories',
    sa.Column('name', sa.String(length=100), nullable=False, comment='分类名称'),
    sa.Column('slug', sa.String(length=100), nullable=False, comment='分类标识符'),
    sa.Column('description', sa.Text(), nullable=True, comment='分类描述'),
    sa.Column('category_type', sa.String(length=20), nullable=False, comment='分类类型'),
    sa.Column('parent_id', sa.UUID(as_uuid=False), nullable=True, comment='父分类ID'),
    sa.Column('sort_order', sa.Integer(), nullable=False, comment='排序顺序'),
    sa.Column('icon', sa.String(length=100), nullable=True, comment='分类图标'),
    sa.Column('color', sa.String(length=7), nullable=True, comment='分类颜色'),
    sa.Column('adapter_count', sa.Integer(), nullable=False, comment='分类下适配器数量'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.CheckConstraint("color IS NULL OR color ~ '^#[0-9A-Fa-f]{6}$'", name='check_category_color_format'),
    sa.CheckConstraint('length(name) >= 1 AND length(name) <= 100', name='check_category_name_length'),
    sa.ForeignKeyConstraint(['parent_id'], ['adapter_categories.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('slug')
    )
    with op.batch_alter_table('adapter_categories', schema=None) as batch_op:
        batch_op.create_index('idx_adapter_categories_parent_id', ['parent_id'], unique=False)
        batch_op.create_index('idx_adapter_categories_slug', ['slug'], unique=False)
        batch_op.create_index('idx_adapter_categories_type', ['category_type'], unique=False)

    op.create_table('forums',
    sa.Column('name', sa.String(length=100), nullable=False, comment='论坛名称'),
    sa.Column('slug', sa.String(length=100), nullable=False, comment='论坛标识符'),
    sa.Column('description', sa.Text(), nullable=True, comment='论坛描述'),
    sa.Column('forum_type', sa.String(length=20), nullable=False, comment='论坛类型'),
    sa.Column('parent_id', sa.UUID(as_uuid=False), nullable=True, comment='父论坛ID'),
    sa.Column('sort_order', sa.Integer(), nullable=False, comment='排序顺序'),
    sa.Column('is_public', sa.Boolean(), nullable=False, comment='是否公开可见'),
    sa.Column('allow_topics', sa.Boolean(), nullable=False, comment='是否允许发布主题'),
    sa.Column('allow_posts', sa.Boolean(), nullable=False, comment='是否允许发布帖子'),
    sa.Column('require_approval', sa.Boolean(), nullable=False, comment='是否需要审核'),
    sa.Column('moderators', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='版主用户ID列表'),
    sa.Column('icon', sa.String(length=100), nullable=True, comment='论坛图标'),
    sa.Column('color', sa.String(length=7), nullable=True, comment='论坛颜色'),
    sa.Column('banner_url', sa.String(length=500), nullable=True, comment='横幅图片URL'),
    sa.Column('topic_count', sa.Integer(), nullable=False, comment='主题数量'),
    sa.Column('post_count', sa.Integer(), nullable=False, comment='帖子数量'),
    sa.Column('last_activity_at', sa.DateTime(timezone=True), nullable=True, comment='最后活动时间'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='元数据'),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='标签'),
    sa.CheckConstraint("color IS NULL OR color ~ '^#[0-9A-Fa-f]{6}$'", name='check_forum_color_format'),
    sa.CheckConstraint('length(name) >= 1 AND length(name) <= 100', name='check_forum_name_length'),
    sa.ForeignKeyConstraint(['parent_id'], ['forums.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('slug')
    )
    with op.batch_alter_table('forums', schema=None) as batch_op:
        batch_op.create_index('idx_forums_parent_id', ['parent_id'], unique=False)
        batch_op.create_index('idx_forums_public', ['is_public'], unique=False)
        batch_op.create_index('idx_forums_slug', ['slug'], unique=False)
        batch_op.create_index('idx_forums_type', ['forum_type'], unique=False)

    op.create_table('users',
    sa.Column('username', sa.String(length=50), nullable=False, comment='用户名'),
    sa.Column('email', sa.String(length=255), nullable=False, comment='邮箱地址'),
    sa.Column('password_hash', sa.String(length=255), nullable=False, comment='密码哈希'),
    sa.Column('salt', sa.String(length=32), nullable=False, comment='密码盐值'),
    sa.Column('user_status', sa.String(length=20), nullable=False, comment='用户状态'),
    sa.Column('user_role', sa.String(length=20), nullable=False, comment='用户角色'),
    sa.Column('is_verified', sa.Boolean(), nullable=False, comment='邮箱是否已验证'),
    sa.Column('verification_token', sa.String(length=64), nullable=True, comment='邮箱验证令牌'),
    sa.Column('verification_expires_at', sa.DateTime(timezone=True), nullable=True, comment='验证令牌过期时间'),
    sa.Column('reset_token', sa.String(length=64), nullable=True, comment='密码重置令牌'),
    sa.Column('reset_expires_at', sa.DateTime(timezone=True), nullable=True, comment='重置令牌过期时间'),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True, comment='最后登录时间'),
    sa.Column('last_login_ip', sa.String(length=45), nullable=True, comment='最后登录IP'),
    sa.Column('login_attempts', sa.Integer(), nullable=False, comment='登录尝试次数'),
    sa.Column('locked_until', sa.DateTime(timezone=True), nullable=True, comment='账户锁定到期时间'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.CheckConstraint("email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'", name='check_email_format'),
    sa.CheckConstraint('length(username) >= 3 AND length(username) <= 50', name='check_username_length'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index('idx_users_email', ['email'], unique=False)
        batch_op.create_index('idx_users_reset_token', ['reset_token'], unique=False)
        batch_op.create_index('idx_users_role', ['user_role'], unique=False)
        batch_op.create_index('idx_users_status', ['user_status'], unique=False)
        batch_op.create_index('idx_users_username', ['username'], unique=False)
        batch_op.create_index('idx_users_verification_token', ['verification_token'], unique=False)

    op.create_table('adapters',
    sa.Column('name', sa.String(length=100), nullable=False, comment='适配器名称'),
    sa.Column('slug', sa.String(length=100), nullable=False, comment='适配器标识符'),
    sa.Column('display_name', sa.String(length=100), nullable=True, comment='显示名称'),
    sa.Column('description', sa.Text(), nullable=True, comment='适配器描述'),
    sa.Column('long_description', sa.Text(), nullable=True, comment='详细描述（支持Markdown）'),
    sa.Column('author_id', sa.UUID(as_uuid=False), nullable=False, comment='作者用户ID'),
    sa.Column('maintainers', postgresql.ARRAY(sa.String()), nullable=True, comment='维护者用户ID列表'),
    sa.Column('adapter_type', sa.String(length=20), nullable=False, comment='适配器类型'),
    sa.Column('adapter_status', sa.String(length=20), nullable=False, comment='适配器状态'),
    sa.Column('visibility', sa.String(length=20), nullable=False, comment='可见性'),
    sa.Column('license', sa.String(length=50), nullable=False, comment='许可证'),
    sa.Column('license_text', sa.Text(), nullable=True, comment='自定义许可证文本'),
    sa.Column('repository_url', sa.String(length=500), nullable=True, comment='代码仓库URL'),
    sa.Column('homepage_url', sa.String(length=500), nullable=True, comment='主页URL'),
    sa.Column('documentation_url', sa.String(length=500), nullable=True, comment='文档URL'),
    sa.Column('primary_category_id', sa.UUID(as_uuid=False), nullable=True, comment='主分类ID'),
    sa.Column('secondary_categories', postgresql.ARRAY(sa.String()), nullable=True, comment='次分类ID列表'),
    sa.Column('keywords', postgresql.ARRAY(sa.String()), nullable=True, comment='关键词标签'),
    sa.Column('download_count', sa.Integer(), nullable=False, comment='总下载量'),
    sa.Column('star_count', sa.Integer(), nullable=False, comment='收藏数'),
    sa.Column('rating_average', sa.Numeric(precision=3, scale=2), nullable=True, comment='平均评分'),
    sa.Column('rating_count', sa.Integer(), nullable=False, comment='评分数量'),
    sa.Column('latest_version', sa.String(length=50), nullable=True, comment='最新版本号'),
    sa.Column('published_at', sa.DateTime(timezone=True), nullable=True, comment='首次发布时间'),
    sa.Column('is_featured', sa.Boolean(), nullable=False, comment='是否为推荐适配器'),
    sa.Column('is_verified', sa.Boolean(), nullable=False, comment='是否已验证'),
    sa.Column('moderation_status', sa.String(length=20), nullable=False, comment='审核状态'),
    sa.Column('moderation_notes', sa.Text(), nullable=True, comment='审核备注'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='元数据'),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='标签'),
    sa.CheckConstraint('length(name) >= 1 AND length(name) <= 100', name='check_adapter_name_length'),
    sa.CheckConstraint('rating_average IS NULL OR (rating_average >= 0.00 AND rating_average <= 5.00)', name='check_adapter_rating_range'),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['primary_category_id'], ['adapter_categories.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('author_id', 'slug', name='uk_adapters_author_slug')
    )
    with op.batch_alter_table('adapters', schema=None) as batch_op:
        batch_op.create_index('idx_adapters_author_id', ['author_id'], unique=False)
        batch_op.create_index('idx_adapters_category', ['primary_category_id'], unique=False)
        batch_op.create_index('idx_adapters_featured', ['is_featured'], unique=False)
        batch_op.create_index('idx_adapters_name', ['name'], unique=False)
        batch_op.create_index('idx_adapters_published_at', ['published_at'], unique=False)
        batch_op.create_index('idx_adapters_slug', ['slug'], unique=False)
        batch_op.create_index('idx_adapters_status', ['adapter_status'], unique=False)
        batch_op.create_index('idx_adapters_type', ['adapter_type'], unique=False)
        batch_op.create_index('idx_adapters_verified', ['is_verified'], unique=False)
        batch_op.create_index('idx_adapters_visibility', ['visibility'], unique=False)

    op.create_table('characters',
    sa.Column('name', sa.String(length=100), nullable=False, comment='角色名称'),
    sa.Column('slug', sa.String(length=100), nullable=False, comment='角色标识符'),
    sa.Column('display_name', sa.String(length=100), nullable=False, comment='显示名称'),
    sa.Column('description', sa.Text(), nullable=True, comment='角色描述'),
    sa.Column('biography', sa.Text(), nullable=True, comment='角色背景故事'),
    sa.Column('author_id', sa.UUID(as_uuid=False), nullable=False, comment='作者用户ID'),
    sa.Column('character_type', sa.String(length=20), nullable=False, comment='角色类型'),
    sa.Column('gender', sa.String(length=20), nullable=False, comment='性别'),
    sa.Column('age', sa.Integer(), nullable=True, comment='年龄'),
    sa.Column('height', sa.Integer(), nullable=True, comment='身高（cm）'),
    sa.Column('birthday', sa.String(length=10), nullable=True, comment='生日（MM-DD）'),
    sa.Column('appearance', sa.Text(), nullable=True, comment='外观描述'),
    sa.Column('clothing', sa.Text(), nullable=True, comment='服装描述'),
    sa.Column('hair_color', sa.String(length=50), nullable=True, comment='发色'),
    sa.Column('eye_color', sa.String(length=50), nullable=True, comment='瞳色'),
    sa.Column('avatar_url', sa.String(length=500), nullable=True, comment='头像URL'),
    sa.Column('thumbnail_url', sa.String(length=500), nullable=True, comment='缩略图URL'),
    sa.Column('banner_url', sa.String(length=500), nullable=True, comment='横幅URL'),
    sa.Column('system_prompt', sa.Text(), nullable=False, comment='系统提示词'),
    sa.Column('greeting_message', sa.Text(), nullable=True, comment='问候消息'),
    sa.Column('example_dialogues', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='示例对话'),
    sa.Column('personality_traits', postgresql.ARRAY(sa.String()), nullable=True, comment='人格特征列表'),
    sa.Column('speaking_style', sa.Text(), nullable=True, comment='说话风格描述'),
    sa.Column('is_public', sa.Boolean(), nullable=False, comment='是否公开'),
    sa.Column('is_featured', sa.Boolean(), nullable=False, comment='是否推荐'),
    sa.Column('is_verified', sa.Boolean(), nullable=False, comment='是否官方验证'),
    sa.Column('usage_count', sa.Integer(), nullable=False, comment='使用次数'),
    sa.Column('favorite_count', sa.Integer(), nullable=False, comment='收藏次数'),
    sa.Column('version', sa.String(length=20), nullable=False, comment='版本号'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='元数据'),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='标签'),
    sa.CheckConstraint('age IS NULL OR (age >= 1 AND age <= 1000)', name='check_character_age'),
    sa.CheckConstraint('length(name) >= 1 AND length(name) <= 100', name='check_character_name_length'),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('author_id', 'slug', name='uk_characters_author_slug')
    )
    with op.batch_alter_table('characters', schema=None) as batch_op:
        batch_op.create_index('idx_characters_author_id', ['author_id'], unique=False)
        batch_op.create_index('idx_characters_featured', ['is_featured'], unique=False)
        batch_op.create_index('idx_characters_name', ['name'], unique=False)
        batch_op.create_index('idx_characters_public', ['is_public'], unique=False)
        batch_op.create_index('idx_characters_slug', ['slug'], unique=False)
        batch_op.create_index('idx_characters_type', ['character_type'], unique=False)

    op.create_table('follows',
    sa.Column('follower_id', sa.UUID(as_uuid=False), nullable=False, comment='关注者用户ID'),
    sa.Column('target_type', sa.String(length=20), nullable=False, comment='关注目标类型'),
    sa.Column('target_id', sa.UUID(as_uuid=False), nullable=False, comment='关注目标ID'),
    sa.Column('notify_on_update', sa.Boolean(), nullable=False, comment='是否在更新时通知'),
    sa.Column('notify_on_reply', sa.Boolean(), nullable=False, comment='是否在回复时通知'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.ForeignKeyConstraint(['follower_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('follower_id', 'target_type', 'target_id', name='uk_follows_unique')
    )
    with op.batch_alter_table('follows', schema=None) as batch_op:
        batch_op.create_index('idx_follows_follower_id', ['follower_id'], unique=False)
        batch_op.create_index('idx_follows_target', ['target_type', 'target_id'], unique=False)

    op.create_table('likes',
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False, comment='点赞用户ID'),
    sa.Column('target_type', sa.String(length=20), nullable=False, comment='目标类型（post/comment/topic）'),
    sa.Column('target_id', sa.UUID(as_uuid=False), nullable=False, comment='目标内容ID'),
    sa.Column('like_type', sa.String(length=20), nullable=False, comment='点赞类型'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'target_type', 'target_id', name='uk_likes_unique')
    )
    with op.batch_alter_table('likes', schema=None) as batch_op:
        batch_op.create_index('idx_likes_target', ['target_type', 'target_id'], unique=False)
        batch_op.create_index('idx_likes_type', ['like_type'], unique=False)
        batch_op.create_index('idx_likes_user_id', ['user_id'], unique=False)

    op.create_table('package_templates',
    sa.Column('name', sa.String(length=100), nullable=False, comment='模板名称'),
    sa.Column('slug', sa.String(length=100), nullable=False, comment='模板标识符'),
    sa.Column('display_name', sa.String(length=100), nullable=True, comment='显示名称'),
    sa.Column('description', sa.Text(), nullable=True, comment='模板描述'),
    sa.Column('template_type', sa.String(length=30), nullable=False, comment='模板类型'),
    sa.Column('package_type', sa.String(length=20), nullable=False, comment='打包类型'),
    sa.Column('author_id', sa.UUID(as_uuid=False), nullable=False, comment='模板作者ID'),
    sa.Column('version', sa.String(length=50), nullable=False, comment='模板版本'),
    sa.Column('supported_platforms', postgresql.ARRAY(sa.String()), nullable=False, comment='支持的目标平台'),
    sa.Column('template_content', sa.Text(), nullable=False, comment='模板内容'),
    sa.Column('config_schema', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='配置参数模式'),
    sa.Column('default_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='默认配置参数'),
    sa.Column('requirements', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='依赖要求'),
    sa.Column('environment_variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='环境变量'),
    sa.Column('pre_build_script', sa.Text(), nullable=True, comment='构建前脚本'),
    sa.Column('post_build_script', sa.Text(), nullable=True, comment='构建后脚本'),
    sa.Column('is_public', sa.Boolean(), nullable=False, comment='是否公开可用'),
    sa.Column('is_verified', sa.Boolean(), nullable=False, comment='是否已验证'),
    sa.Column('is_deprecated', sa.Boolean(), nullable=False, comment='是否已废弃'),
    sa.Column('usage_count', sa.Integer(), nullable=False, comment='使用次数'),
    sa.Column('success_rate', sa.String(length=5), nullable=True, comment='成功率'),
    sa.Column('documentation_url', sa.String(length=500), nullable=True, comment='文档链接'),
    sa.Column('example_url', sa.String(length=500), nullable=True, comment='示例链接'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='元数据'),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='标签'),
    sa.CheckConstraint('length(name) >= 1 AND length(name) <= 100', name='check_template_name_length'),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('slug')
    )
    with op.batch_alter_table('package_templates', schema=None) as batch_op:
        batch_op.create_index('idx_package_templates_author_id', ['author_id'], unique=False)
        batch_op.create_index('idx_package_templates_package_type', ['package_type'], unique=False)
        batch_op.create_index('idx_package_templates_public', ['is_public'], unique=False)
        batch_op.create_index('idx_package_templates_slug', ['slug'], unique=False)
        batch_op.create_index('idx_package_templates_type', ['template_type'], unique=False)
        batch_op.create_index('idx_package_templates_verified', ['is_verified'], unique=False)

    op.create_table('topics',
    sa.Column('forum_id', sa.UUID(as_uuid=False), nullable=False, comment='所属论坛ID'),
    sa.Column('title', sa.String(length=200), nullable=False, comment='主题标题'),
    sa.Column('slug', sa.String(length=200), nullable=False, comment='主题标识符'),
    sa.Column('description', sa.Text(), nullable=True, comment='主题描述'),
    sa.Column('author_id', sa.UUID(as_uuid=False), nullable=False, comment='主题作者ID'),
    sa.Column('topic_status', sa.String(length=20), nullable=False, comment='主题状态'),
    sa.Column('is_sticky', sa.Boolean(), nullable=False, comment='是否置顶'),
    sa.Column('is_locked', sa.Boolean(), nullable=False, comment='是否锁定'),
    sa.Column('is_featured', sa.Boolean(), nullable=False, comment='是否精选'),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='主题标签'),
    sa.Column('view_count', sa.Integer(), nullable=False, comment='浏览次数'),
    sa.Column('post_count', sa.Integer(), nullable=False, comment='帖子数量'),
    sa.Column('like_count', sa.Integer(), nullable=False, comment='点赞数量'),
    sa.Column('follow_count', sa.Integer(), nullable=False, comment='关注数量'),
    sa.Column('last_post_at', sa.DateTime(timezone=True), nullable=True, comment='最后发帖时间'),
    sa.Column('last_post_user_id', sa.UUID(as_uuid=False), nullable=True, comment='最后发帖用户ID'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='元数据'),
    sa.CheckConstraint('length(title) >= 1 AND length(title) <= 200', name='check_topic_title_length'),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['forum_id'], ['forums.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['last_post_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('forum_id', 'slug', name='uk_topics_forum_slug')
    )
    with op.batch_alter_table('topics', schema=None) as batch_op:
        batch_op.create_index('idx_topics_author_id', ['author_id'], unique=False)
        batch_op.create_index('idx_topics_featured', ['is_featured'], unique=False)
        batch_op.create_index('idx_topics_forum_id', ['forum_id'], unique=False)
        batch_op.create_index('idx_topics_last_post_at', ['last_post_at'], unique=False)
        batch_op.create_index('idx_topics_slug', ['slug'], unique=False)
        batch_op.create_index('idx_topics_status', ['topic_status'], unique=False)
        batch_op.create_index('idx_topics_sticky', ['is_sticky'], unique=False)

    op.create_table('user_permissions',
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False, comment='用户ID'),
    sa.Column('permission', sa.String(length=50), nullable=False, comment='权限类型'),
    sa.Column('resource_type', sa.String(length=50), nullable=True, comment='资源类型'),
    sa.Column('resource_id', sa.String(length=255), nullable=True, comment='资源ID'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True, comment='权限过期时间'),
    sa.Column('granted_by', sa.String(length=255), nullable=True, comment='权限授予者'),
    sa.Column('granted_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='权限授予时间'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'permission', 'resource_type', 'resource_id', name='uk_user_permissions_unique')
    )
    with op.batch_alter_table('user_permissions', schema=None) as batch_op:
        batch_op.create_index('idx_user_permissions_permission', ['permission'], unique=False)
        batch_op.create_index('idx_user_permissions_resource', ['resource_type', 'resource_id'], unique=False)
        batch_op.create_index('idx_user_permissions_user_id', ['user_id'], unique=False)

    op.create_table('user_preferences',
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False, comment='用户ID'),
    sa.Column('theme_mode', sa.String(length=10), nullable=False, comment='主题模式'),
    sa.Column('language', sa.String(length=10), nullable=False, comment='界面语言'),
    sa.Column('timezone', sa.String(length=50), nullable=False, comment='时区设置'),
    sa.Column('email_notifications', sa.Boolean(), nullable=False, comment='是否接收邮件通知'),
    sa.Column('push_notifications', sa.Boolean(), nullable=False, comment='是否接收推送通知'),
    sa.Column('notification_types', postgresql.ARRAY(sa.String()), nullable=True, comment='通知类型偏好'),
    sa.Column('public_profile', sa.Boolean(), nullable=False, comment='是否公开个人资料'),
    sa.Column('show_email', sa.Boolean(), nullable=False, comment='是否公开邮箱地址'),
    sa.Column('allow_messages', sa.Boolean(), nullable=False, comment='是否允许私信'),
    sa.Column('default_adapter_visibility', sa.String(length=20), nullable=False, comment='默认适配器可见性'),
    sa.Column('auto_publish', sa.Boolean(), nullable=False, comment='是否自动发布适配器'),
    sa.Column('custom_settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='自定义设置'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', name='uk_user_preferences_user_id')
    )
    with op.batch_alter_table('user_preferences', schema=None) as batch_op:
        batch_op.create_index('idx_user_preferences_user_id', ['user_id'], unique=False)

    op.create_table('user_profiles',
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False, comment='用户ID'),
    sa.Column('display_name', sa.String(length=100), nullable=True, comment='显示名称'),
    sa.Column('avatar_url', sa.String(length=500), nullable=True, comment='头像URL'),
    sa.Column('bio', sa.Text(), nullable=True, comment='个人简介'),
    sa.Column('location', sa.String(length=100), nullable=True, comment='地理位置'),
    sa.Column('website', sa.String(length=255), nullable=True, comment='个人网站'),
    sa.Column('github_username', sa.String(length=50), nullable=True, comment='GitHub用户名'),
    sa.Column('preferred_adapter_types', postgresql.ARRAY(sa.String()), nullable=True, comment='偏好的适配器类型'),
    sa.Column('skills', postgresql.ARRAY(sa.String()), nullable=True, comment='技能标签'),
    sa.Column('reputation_score', sa.Integer(), nullable=False, comment='声誉分数'),
    sa.Column('adapter_count', sa.Integer(), nullable=False, comment='发布的适配器数量'),
    sa.Column('download_count', sa.Integer(), nullable=False, comment='适配器总下载量'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='元数据'),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='标签'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', name='uk_user_profiles_user_id')
    )
    with op.batch_alter_table('user_profiles', schema=None) as batch_op:
        batch_op.create_index('idx_user_profiles_github', ['github_username'], unique=False)
        batch_op.create_index('idx_user_profiles_user_id', ['user_id'], unique=False)

    op.create_table('user_sessions',
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False, comment='用户ID'),
    sa.Column('session_token', sa.String(length=255), nullable=False, comment='会话令牌'),
    sa.Column('refresh_token', sa.String(length=255), nullable=False, comment='刷新令牌'),
    sa.Column('session_status', sa.String(length=20), nullable=False, comment='会话状态'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False, comment='会话过期时间'),
    sa.Column('last_activity_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='最后活动时间'),
    sa.Column('ip_address', sa.String(length=45), nullable=False, comment='客户端IP地址'),
    sa.Column('user_agent', sa.String(length=500), nullable=True, comment='用户代理'),
    sa.Column('device_info', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='设备信息'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('refresh_token'),
    sa.UniqueConstraint('session_token')
    )
    with op.batch_alter_table('user_sessions', schema=None) as batch_op:
        batch_op.create_index('idx_user_sessions_expires_at', ['expires_at'], unique=False)
        batch_op.create_index('idx_user_sessions_refresh_token', ['refresh_token'], unique=False)
        batch_op.create_index('idx_user_sessions_status', ['session_status'], unique=False)
        batch_op.create_index('idx_user_sessions_token', ['session_token'], unique=False)
        batch_op.create_index('idx_user_sessions_user_id', ['user_id'], unique=False)

    op.create_table('workflow_templates',
    sa.Column('name', sa.String(length=100), nullable=False, comment='模板名称'),
    sa.Column('slug', sa.String(length=100), nullable=False, comment='模板标识符'),
    sa.Column('description', sa.Text(), nullable=True, comment='模板描述'),
    sa.Column('category', sa.String(length=50), nullable=False, comment='模板分类'),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True, comment='标签列表'),
    sa.Column('template_definition', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='模板定义'),
    sa.Column('usage_guide', sa.Text(), nullable=True, comment='使用指南'),
    sa.Column('example_input', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='示例输入'),
    sa.Column('example_output', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='示例输出'),
    sa.Column('author_id', sa.UUID(as_uuid=False), nullable=True, comment='作者用户ID'),
    sa.Column('is_official', sa.Boolean(), nullable=False, comment='是否为官方模板'),
    sa.Column('is_featured', sa.Boolean(), nullable=False, comment='是否为推荐模板'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='是否激活'),
    sa.Column('usage_count', sa.Integer(), nullable=False, comment='使用次数'),
    sa.Column('version', sa.String(length=20), nullable=False, comment='版本号'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='元数据'),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('slug')
    )
    with op.batch_alter_table('workflow_templates', schema=None) as batch_op:
        batch_op.create_index('idx_workflow_templates_author_id', ['author_id'], unique=False)
        batch_op.create_index('idx_workflow_templates_category', ['category'], unique=False)
        batch_op.create_index('idx_workflow_templates_featured', ['is_featured'], unique=False)
        batch_op.create_index('idx_workflow_templates_official', ['is_official'], unique=False)
        batch_op.create_index('idx_workflow_templates_slug', ['slug'], unique=False)

    op.create_table('workflows',
    sa.Column('name', sa.String(length=100), nullable=False, comment='工作流名称'),
    sa.Column('slug', sa.String(length=100), nullable=False, comment='工作流标识符'),
    sa.Column('description', sa.Text(), nullable=True, comment='工作流描述'),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False, comment='用户ID'),
    sa.Column('category', sa.String(length=50), nullable=True, comment='分类'),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True, comment='标签列表'),
    sa.Column('workflow_status', sa.String(length=20), nullable=False, comment='工作流状态'),
    sa.Column('visibility', sa.String(length=20), nullable=False, comment='可见性'),
    sa.Column('definition', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='工作流定义JSON'),
    sa.Column('version', sa.String(length=20), nullable=False, comment='版本号'),
    sa.Column('trigger_type', sa.String(length=20), nullable=False, comment='触发器类型'),
    sa.Column('trigger_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='触发器配置'),
    sa.Column('timeout_seconds', sa.Integer(), nullable=False, comment='执行超时时间（秒）'),
    sa.Column('retry_count', sa.Integer(), nullable=False, comment='重试次数'),
    sa.Column('retry_delay', sa.Integer(), nullable=False, comment='重试延迟（秒）'),
    sa.Column('environment_variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='环境变量'),
    sa.Column('execution_count', sa.Integer(), nullable=False, comment='总执行次数'),
    sa.Column('success_count', sa.Integer(), nullable=False, comment='成功次数'),
    sa.Column('failure_count', sa.Integer(), nullable=False, comment='失败次数'),
    sa.Column('average_duration_ms', sa.Integer(), nullable=True, comment='平均执行时间（毫秒）'),
    sa.Column('is_template', sa.Boolean(), nullable=False, comment='是否为模板'),
    sa.Column('clone_count', sa.Integer(), nullable=False, comment='被克隆次数'),
    sa.Column('parent_workflow_id', sa.UUID(as_uuid=False), nullable=True, comment='父工作流ID（克隆来源）'),
    sa.Column('last_executed_at', sa.DateTime(timezone=True), nullable=True, comment='最后执行时间'),
    sa.Column('last_execution_status', sa.String(length=20), nullable=True, comment='最后执行状态'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='元数据'),
    sa.CheckConstraint('retry_count >= 0 AND retry_count <= 10', name='check_retry_count'),
    sa.CheckConstraint('timeout_seconds >= 1 AND timeout_seconds <= 86400', name='check_timeout_seconds'),
    sa.ForeignKeyConstraint(['parent_workflow_id'], ['workflows.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'slug', name='uk_workflows_user_slug')
    )
    with op.batch_alter_table('workflows', schema=None) as batch_op:
        batch_op.create_index('idx_workflows_category', ['category'], unique=False)
        batch_op.create_index('idx_workflows_is_template', ['is_template'], unique=False)
        batch_op.create_index('idx_workflows_slug', ['slug'], unique=False)
        batch_op.create_index('idx_workflows_status', ['workflow_status'], unique=False)
        batch_op.create_index('idx_workflows_user_id', ['user_id'], unique=False)
        batch_op.create_index('idx_workflows_visibility', ['visibility'], unique=False)

    op.create_table('adapter_dependencies',
    sa.Column('adapter_id', sa.UUID(as_uuid=False), nullable=False, comment='适配器ID'),
    sa.Column('dependency_name', sa.String(length=100), nullable=False, comment='依赖名称'),
    sa.Column('dependency_type', sa.String(length=20), nullable=False, comment='依赖类型'),
    sa.Column('version_constraint', sa.String(length=20), nullable=False, comment='版本约束类型'),
    sa.Column('version_spec', sa.String(length=100), nullable=False, comment='版本规范'),
    sa.Column('is_optional', sa.Boolean(), nullable=False, comment='是否为可选依赖'),
    sa.Column('description', sa.String(length=500), nullable=True, comment='依赖描述'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.ForeignKeyConstraint(['adapter_id'], ['adapters.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('adapter_id', 'dependency_name', 'dependency_type', name='uk_adapter_dependencies_unique')
    )
    with op.batch_alter_table('adapter_dependencies', schema=None) as batch_op:
        batch_op.create_index('idx_adapter_dependencies_adapter_id', ['adapter_id'], unique=False)
        batch_op.create_index('idx_adapter_dependencies_name', ['dependency_name'], unique=False)
        batch_op.create_index('idx_adapter_dependencies_type', ['dependency_type'], unique=False)

    op.create_table('adapter_downloads',
    sa.Column('adapter_id', sa.UUID(as_uuid=False), nullable=False, comment='适配器ID'),
    sa.Column('version', sa.String(length=50), nullable=True, comment='下载的版本号'),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=True, comment='下载用户ID'),
    sa.Column('ip_address', sa.String(length=45), nullable=False, comment='下载IP地址'),
    sa.Column('user_agent', sa.String(length=500), nullable=True, comment='用户代理'),
    sa.Column('referer', sa.String(length=500), nullable=True, comment='来源页面'),
    sa.Column('country', sa.String(length=2), nullable=True, comment='国家代码'),
    sa.Column('region', sa.String(length=100), nullable=True, comment='地区'),
    sa.Column('city', sa.String(length=100), nullable=True, comment='城市'),
    sa.Column('is_successful', sa.Boolean(), nullable=False, comment='是否下载成功'),
    sa.Column('error_message', sa.String(length=500), nullable=True, comment='错误信息'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.ForeignKeyConstraint(['adapter_id'], ['adapters.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('adapter_downloads', schema=None) as batch_op:
        batch_op.create_index('idx_adapter_downloads_adapter_id', ['adapter_id'], unique=False)
        batch_op.create_index('idx_adapter_downloads_country', ['country'], unique=False)
        batch_op.create_index('idx_adapter_downloads_created_at', ['created_at'], unique=False)
        batch_op.create_index('idx_adapter_downloads_ip', ['ip_address'], unique=False)
        batch_op.create_index('idx_adapter_downloads_user_id', ['user_id'], unique=False)

    op.create_table('adapter_ratings',
    sa.Column('adapter_id', sa.UUID(as_uuid=False), nullable=False, comment='适配器ID'),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False, comment='评分用户ID'),
    sa.Column('rating_type', sa.String(length=20), nullable=False, comment='评分类型'),
    sa.Column('rating', sa.Numeric(precision=3, scale=2), nullable=False, comment='评分分数'),
    sa.Column('title', sa.String(length=200), nullable=True, comment='评论标题'),
    sa.Column('comment', sa.Text(), nullable=True, comment='评论内容'),
    sa.Column('is_anonymous', sa.Boolean(), nullable=False, comment='是否匿名评论'),
    sa.Column('is_verified_download', sa.Boolean(), nullable=False, comment='是否为验证下载后的评分'),
    sa.Column('helpful_count', sa.Integer(), nullable=False, comment='有用标记数'),
    sa.Column('unhelpful_count', sa.Integer(), nullable=False, comment='无用标记数'),
    sa.Column('is_moderated', sa.Boolean(), nullable=False, comment='是否已审核'),
    sa.Column('moderation_reason', sa.String(length=500), nullable=True, comment='审核原因'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.CheckConstraint('rating >= 0.00 AND rating <= 5.00', name='check_rating_range'),
    sa.ForeignKeyConstraint(['adapter_id'], ['adapters.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('adapter_id', 'user_id', 'rating_type', name='uk_adapter_ratings_unique')
    )
    with op.batch_alter_table('adapter_ratings', schema=None) as batch_op:
        batch_op.create_index('idx_adapter_ratings_adapter_id', ['adapter_id'], unique=False)
        batch_op.create_index('idx_adapter_ratings_created_at', ['created_at'], unique=False)
        batch_op.create_index('idx_adapter_ratings_rating', ['rating'], unique=False)
        batch_op.create_index('idx_adapter_ratings_type', ['rating_type'], unique=False)
        batch_op.create_index('idx_adapter_ratings_user_id', ['user_id'], unique=False)

    op.create_table('adapter_versions',
    sa.Column('adapter_id', sa.UUID(as_uuid=False), nullable=False, comment='适配器ID'),
    sa.Column('version', sa.String(length=50), nullable=False, comment='版本号'),
    sa.Column('title', sa.String(length=200), nullable=True, comment='版本标题'),
    sa.Column('description', sa.Text(), nullable=True, comment='版本描述'),
    sa.Column('changelog', sa.Text(), nullable=True, comment='更新日志'),
    sa.Column('is_prerelease', sa.Boolean(), nullable=False, comment='是否为预发布版本'),
    sa.Column('is_deprecated', sa.Boolean(), nullable=False, comment='是否已废弃'),
    sa.Column('published_at', sa.DateTime(timezone=True), nullable=True, comment='发布时间'),
    sa.Column('file_size', sa.Integer(), nullable=True, comment='文件大小（字节）'),
    sa.Column('file_hash', sa.String(length=128), nullable=True, comment='文件哈希值'),
    sa.Column('download_url', sa.String(length=500), nullable=True, comment='下载URL'),
    sa.Column('min_zishu_version', sa.String(length=50), nullable=True, comment='最小支持的紫舒版本'),
    sa.Column('max_zishu_version', sa.String(length=50), nullable=True, comment='最大支持的紫舒版本'),
    sa.Column('supported_platforms', postgresql.ARRAY(sa.String()), nullable=True, comment='支持的平台'),
    sa.Column('entry_point', sa.String(length=255), nullable=True, comment='入口点'),
    sa.Column('configuration_schema', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='配置模式'),
    sa.Column('api_specification', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='API规范'),
    sa.Column('download_count', sa.Integer(), nullable=False, comment='版本下载量'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='元数据'),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='标签'),
    sa.CheckConstraint('length(version) >= 1 AND length(version) <= 50', name='check_version_length'),
    sa.ForeignKeyConstraint(['adapter_id'], ['adapters.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('adapter_id', 'version', name='uk_adapter_versions_unique')
    )
    with op.batch_alter_table('adapter_versions', schema=None) as batch_op:
        batch_op.create_index('idx_adapter_versions_adapter_id', ['adapter_id'], unique=False)
        batch_op.create_index('idx_adapter_versions_published_at', ['published_at'], unique=False)
        batch_op.create_index('idx_adapter_versions_version', ['version'], unique=False)

    op.create_table('character_expressions',
    sa.Column('character_id', sa.UUID(as_uuid=False), nullable=False, comment='角色ID'),
    sa.Column('expression_type', sa.String(length=20), nullable=False, comment='表情类型'),
    sa.Column('expression_name', sa.String(length=50), nullable=False, comment='表情名称'),
    sa.Column('description', sa.String(length=200), nullable=True, comment='表情描述'),
    sa.Column('animation_file', sa.String(length=255), nullable=True, comment='动画文件路径'),
    sa.Column('animation_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='动画配置'),
    sa.Column('trigger_keywords', postgresql.ARRAY(sa.String()), nullable=True, comment='触发关键词'),
    sa.Column('trigger_emotions', postgresql.ARRAY(sa.String()), nullable=True, comment='触发情绪'),
    sa.Column('trigger_probability', sa.Integer(), nullable=False, comment='触发概率（0-100）'),
    sa.Column('priority', sa.Integer(), nullable=False, comment='优先级'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.CheckConstraint('trigger_probability >= 0 AND trigger_probability <= 100', name='check_trigger_probability'),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('character_id', 'expression_name', name='uk_character_expressions_unique')
    )
    with op.batch_alter_table('character_expressions', schema=None) as batch_op:
        batch_op.create_index('idx_character_expressions_character_id', ['character_id'], unique=False)
        batch_op.create_index('idx_character_expressions_type', ['expression_type'], unique=False)

    op.create_table('character_models',
    sa.Column('character_id', sa.UUID(as_uuid=False), nullable=False, comment='角色ID'),
    sa.Column('model_name', sa.String(length=100), nullable=False, comment='模型名称'),
    sa.Column('model_type', sa.String(length=20), nullable=False, comment='模型类型'),
    sa.Column('description', sa.String(length=500), nullable=True, comment='模型描述'),
    sa.Column('model_url', sa.String(length=500), nullable=False, comment='模型文件URL'),
    sa.Column('model_size', sa.Integer(), nullable=True, comment='模型文件大小（字节）'),
    sa.Column('model_hash', sa.String(length=64), nullable=True, comment='模型文件哈希'),
    sa.Column('model_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='模型配置'),
    sa.Column('expressions_mapping', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='表情映射'),
    sa.Column('motions_mapping', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='动作映射'),
    sa.Column('idle_motions', postgresql.ARRAY(sa.String()), nullable=True, comment='空闲动作列表'),
    sa.Column('physics_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='物理配置'),
    sa.Column('scale', sa.Integer(), nullable=False, comment='缩放比例（10-300）'),
    sa.Column('position_x', sa.Integer(), nullable=False, comment='X位置'),
    sa.Column('position_y', sa.Integer(), nullable=False, comment='Y位置'),
    sa.Column('is_default', sa.Boolean(), nullable=False, comment='是否为默认模型'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.CheckConstraint('scale >= 10 AND scale <= 300', name='check_scale'),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('character_models', schema=None) as batch_op:
        batch_op.create_index('idx_character_models_character_id', ['character_id'], unique=False)
        batch_op.create_index('idx_character_models_type', ['model_type'], unique=False)

    op.create_table('character_personalities',
    sa.Column('character_id', sa.UUID(as_uuid=False), nullable=False, comment='角色ID'),
    sa.Column('mbti_type', sa.String(length=4), nullable=True, comment='MBTI类型'),
    sa.Column('openness', sa.Integer(), nullable=True, comment='开放性'),
    sa.Column('conscientiousness', sa.Integer(), nullable=True, comment='尽责性'),
    sa.Column('extraversion', sa.Integer(), nullable=True, comment='外向性'),
    sa.Column('agreeableness', sa.Integer(), nullable=True, comment='亲和性'),
    sa.Column('neuroticism', sa.Integer(), nullable=True, comment='神经质'),
    sa.Column('formality_level', sa.Integer(), nullable=False, comment='正式程度（0-100）'),
    sa.Column('humor_level', sa.Integer(), nullable=False, comment='幽默程度（0-100）'),
    sa.Column('empathy_level', sa.Integer(), nullable=False, comment='共情能力（0-100）'),
    sa.Column('verbosity_level', sa.Integer(), nullable=False, comment='话语详细度（0-100）'),
    sa.Column('interests', postgresql.ARRAY(sa.String()), nullable=True, comment='兴趣列表'),
    sa.Column('hobbies', postgresql.ARRAY(sa.String()), nullable=True, comment='爱好列表'),
    sa.Column('likes', postgresql.ARRAY(sa.String()), nullable=True, comment='喜欢的事物'),
    sa.Column('dislikes', postgresql.ARRAY(sa.String()), nullable=True, comment='讨厌的事物'),
    sa.Column('values', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='价值观'),
    sa.Column('beliefs', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='信念系统'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.CheckConstraint('conscientiousness IS NULL OR (conscientiousness >= 0 AND conscientiousness <= 100)', name='check_conscientiousness'),
    sa.CheckConstraint('formality_level >= 0 AND formality_level <= 100', name='check_formality_level'),
    sa.CheckConstraint('openness IS NULL OR (openness >= 0 AND openness <= 100)', name='check_openness'),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('character_id', name='uk_character_personalities_character_id')
    )
    with op.batch_alter_table('character_personalities', schema=None) as batch_op:
        batch_op.create_index('idx_character_personalities_character_id', ['character_id'], unique=False)

    op.create_table('character_voices',
    sa.Column('character_id', sa.UUID(as_uuid=False), nullable=False, comment='角色ID'),
    sa.Column('voice_name', sa.String(length=100), nullable=False, comment='语音名称'),
    sa.Column('voice_provider', sa.String(length=50), nullable=False, comment='语音提供商'),
    sa.Column('voice_id', sa.String(length=100), nullable=False, comment='语音ID'),
    sa.Column('voice_gender', sa.String(length=20), nullable=False, comment='语音性别'),
    sa.Column('language', sa.String(length=10), nullable=False, comment='语言'),
    sa.Column('accent', sa.String(length=50), nullable=True, comment='口音'),
    sa.Column('speaking_rate', sa.Integer(), nullable=False, comment='语速（50-200）'),
    sa.Column('pitch', sa.Integer(), nullable=False, comment='音调（50-200）'),
    sa.Column('volume', sa.Integer(), nullable=False, comment='音量（0-100）'),
    sa.Column('voice_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='语音配置'),
    sa.Column('is_default', sa.Boolean(), nullable=False, comment='是否为默认语音'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.CheckConstraint('pitch >= 50 AND pitch <= 200', name='check_pitch'),
    sa.CheckConstraint('speaking_rate >= 50 AND speaking_rate <= 200', name='check_speaking_rate'),
    sa.CheckConstraint('volume >= 0 AND volume <= 100', name='check_volume'),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('character_voices', schema=None) as batch_op:
        batch_op.create_index('idx_character_voices_character_id', ['character_id'], unique=False)
        batch_op.create_index('idx_character_voices_provider', ['voice_provider'], unique=False)

    op.create_table('conversations',
    sa.Column('title', sa.String(length=200), nullable=True, comment='对话标题'),
    sa.Column('description', sa.Text(), nullable=True, comment='对话描述'),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False, comment='用户ID'),
    sa.Column('character_id', sa.UUID(as_uuid=False), nullable=True, comment='使用的角色ID'),
    sa.Column('active_adapters', postgresql.ARRAY(sa.String()), nullable=True, comment='启用的适配器ID列表'),
    sa.Column('conversation_status', sa.String(length=20), nullable=False, comment='对话状态'),
    sa.Column('message_count', sa.Integer(), nullable=False, comment='消息总数'),
    sa.Column('token_count', sa.Integer(), nullable=False, comment='Token总消耗'),
    sa.Column('total_cost', sa.Numeric(precision=10, scale=6), nullable=True, comment='总花费（美元）'),
    sa.Column('max_context_length', sa.Integer(), nullable=False, comment='最大上下文长度'),
    sa.Column('system_prompt', sa.Text(), nullable=True, comment='系统提示词'),
    sa.Column('temperature', sa.Numeric(precision=3, scale=2), nullable=True, comment='温度参数'),
    sa.Column('last_message_at', sa.DateTime(timezone=True), nullable=True, comment='最后消息时间'),
    sa.Column('archived_at', sa.DateTime(timezone=True), nullable=True, comment='归档时间'),
    sa.Column('is_shared', sa.Boolean(), nullable=False, comment='是否分享'),
    sa.Column('share_token', sa.String(length=64), nullable=True, comment='分享令牌'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='元数据'),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='标签'),
    sa.CheckConstraint('max_context_length >= 100 AND max_context_length <= 100000', name='check_max_context_length'),
    sa.CheckConstraint('temperature IS NULL OR (temperature >= 0.00 AND temperature <= 2.00)', name='check_temperature_range'),
    sa.ForeignKeyConstraint(['character_id'], ['characters.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('share_token')
    )
    with op.batch_alter_table('conversations', schema=None) as batch_op:
        batch_op.create_index('idx_conversations_character_id', ['character_id'], unique=False)
        batch_op.create_index('idx_conversations_last_message_at', ['last_message_at'], unique=False)
        batch_op.create_index('idx_conversations_share_token', ['share_token'], unique=False)
        batch_op.create_index('idx_conversations_status', ['conversation_status'], unique=False)
        batch_op.create_index('idx_conversations_user_id', ['user_id'], unique=False)

    op.create_table('files',
    sa.Column('filename', sa.String(length=255), nullable=False, comment='文件名'),
    sa.Column('original_filename', sa.String(length=255), nullable=False, comment='原始文件名'),
    sa.Column('display_name', sa.String(length=255), nullable=True, comment='显示名称'),
    sa.Column('description', sa.Text(), nullable=True, comment='文件描述'),
    sa.Column('owner_id', sa.UUID(as_uuid=False), nullable=False, comment='文件所有者ID'),
    sa.Column('file_type', sa.String(length=20), nullable=False, comment='文件类型'),
    sa.Column('mime_type', sa.String(length=100), nullable=False, comment='MIME类型'),
    sa.Column('file_extension', sa.String(length=10), nullable=False, comment='文件扩展名'),
    sa.Column('file_size', sa.BigInteger(), nullable=False, comment='文件大小（字节）'),
    sa.Column('file_hash', sa.String(length=128), nullable=False, comment='文件哈希值（SHA-256）'),
    sa.Column('checksum', sa.String(length=64), nullable=False, comment='文件校验和（MD5）'),
    sa.Column('storage_provider', sa.String(length=20), nullable=False, comment='存储提供商'),
    sa.Column('storage_path', sa.String(length=500), nullable=False, comment='存储路径'),
    sa.Column('storage_bucket', sa.String(length=100), nullable=True, comment='存储桶名称'),
    sa.Column('storage_region', sa.String(length=50), nullable=True, comment='存储区域'),
    sa.Column('public_url', sa.String(length=500), nullable=True, comment='公开访问URL'),
    sa.Column('cdn_url', sa.String(length=500), nullable=True, comment='CDN加速URL'),
    sa.Column('file_status', sa.String(length=20), nullable=False, comment='文件状态'),
    sa.Column('is_public', sa.Boolean(), nullable=False, comment='是否公开可访问'),
    sa.Column('is_temporary', sa.Boolean(), nullable=False, comment='是否为临时文件'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True, comment='文件过期时间'),
    sa.Column('category', sa.String(length=50), nullable=True, comment='文件分类'),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True, comment='文件标签'),
    sa.Column('parent_id', sa.UUID(as_uuid=False), nullable=True, comment='父文件ID（用于变体或副本）'),
    sa.Column('related_adapter_id', sa.UUID(as_uuid=False), nullable=True, comment='关联的适配器ID'),
    sa.Column('version_number', sa.String(length=50), nullable=False, comment='当前版本号'),
    sa.Column('is_latest_version', sa.Boolean(), nullable=False, comment='是否为最新版本'),
    sa.Column('download_count', sa.Integer(), nullable=False, comment='下载次数'),
    sa.Column('view_count', sa.Integer(), nullable=False, comment='查看次数'),
    sa.Column('share_count', sa.Integer(), nullable=False, comment='分享次数'),
    sa.Column('content_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='内容分析结果（尺寸、时长等）'),
    sa.Column('virus_scan_result', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='病毒扫描结果'),
    sa.Column('is_virus_scanned', sa.Boolean(), nullable=False, comment='是否已进行病毒扫描'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='元数据'),
    sa.CheckConstraint('file_size >= 0', name='check_file_size_positive'),
    sa.CheckConstraint('length(filename) >= 1 AND length(filename) <= 255', name='check_filename_length'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_id'], ['files.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['related_adapter_id'], ['adapters.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('files', schema=None) as batch_op:
        batch_op.create_index('idx_files_adapter_id', ['related_adapter_id'], unique=False)
        batch_op.create_index('idx_files_category', ['category'], unique=False)
        batch_op.create_index('idx_files_expires_at', ['expires_at'], unique=False)
        batch_op.create_index('idx_files_file_type', ['file_type'], unique=False)
        batch_op.create_index('idx_files_filename', ['filename'], unique=False)
        batch_op.create_index('idx_files_hash', ['file_hash'], unique=False)
        batch_op.create_index('idx_files_owner_id', ['owner_id'], unique=False)
        batch_op.create_index('idx_files_parent_id', ['parent_id'], unique=False)
        batch_op.create_index('idx_files_public', ['is_public'], unique=False)
        batch_op.create_index('idx_files_status', ['file_status'], unique=False)

    op.create_table('packaging_tasks',
    sa.Column('task_name', sa.String(length=200), nullable=False, comment='任务名称'),
    sa.Column('description', sa.Text(), nullable=True, comment='任务描述'),
    sa.Column('adapter_id', sa.UUID(as_uuid=False), nullable=False, comment='关联适配器ID'),
    sa.Column('adapter_version', sa.String(length=50), nullable=True, comment='适配器版本'),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False, comment='任务创建者ID'),
    sa.Column('template_id', sa.UUID(as_uuid=False), nullable=False, comment='使用的打包模板ID'),
    sa.Column('package_type', sa.String(length=20), nullable=False, comment='打包类型'),
    sa.Column('target_platforms', postgresql.ARRAY(sa.String()), nullable=False, comment='目标平台列表'),
    sa.Column('build_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='构建配置参数'),
    sa.Column('task_status', sa.String(length=20), nullable=False, comment='任务状态'),
    sa.Column('priority', sa.String(length=10), nullable=False, comment='任务优先级'),
    sa.Column('scheduled_at', sa.DateTime(timezone=True), nullable=True, comment='计划执行时间'),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True, comment='开始执行时间'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='完成时间'),
    sa.Column('worker_id', sa.String(length=100), nullable=True, comment='执行节点ID'),
    sa.Column('execution_time', sa.Integer(), nullable=True, comment='执行耗时（秒）'),
    sa.Column('retry_count', sa.Integer(), nullable=False, comment='重试次数'),
    sa.Column('max_retries', sa.Integer(), nullable=False, comment='最大重试次数'),
    sa.Column('success', sa.Boolean(), nullable=True, comment='是否成功'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='错误信息'),
    sa.Column('error_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='错误详情'),
    sa.Column('resource_usage', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='资源使用情况'),
    sa.Column('build_output_path', sa.String(length=500), nullable=True, comment='构建输出路径'),
    sa.Column('build_environment', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='构建环境信息'),
    sa.Column('notify_on_completion', sa.Boolean(), nullable=False, comment='完成时是否通知'),
    sa.Column('notify_on_failure', sa.Boolean(), nullable=False, comment='失败时是否通知'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='元数据'),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='标签'),
    sa.CheckConstraint('max_retries >= 0', name='check_max_retries_positive'),
    sa.CheckConstraint('retry_count >= 0', name='check_retry_count_positive'),
    sa.ForeignKeyConstraint(['adapter_id'], ['adapters.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['template_id'], ['package_templates.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('packaging_tasks', schema=None) as batch_op:
        batch_op.create_index('idx_packaging_tasks_adapter_id', ['adapter_id'], unique=False)
        batch_op.create_index('idx_packaging_tasks_created_at', ['created_at'], unique=False)
        batch_op.create_index('idx_packaging_tasks_priority', ['priority'], unique=False)
        batch_op.create_index('idx_packaging_tasks_scheduled_at', ['scheduled_at'], unique=False)
        batch_op.create_index('idx_packaging_tasks_status', ['task_status'], unique=False)
        batch_op.create_index('idx_packaging_tasks_template_id', ['template_id'], unique=False)
        batch_op.create_index('idx_packaging_tasks_user_id', ['user_id'], unique=False)

    op.create_table('posts',
    sa.Column('topic_id', sa.UUID(as_uuid=False), nullable=False, comment='所属话题ID'),
    sa.Column('title', sa.String(length=200), nullable=True, comment='帖子标题'),
    sa.Column('content', sa.Text(), nullable=False, comment='帖子内容（Markdown格式）'),
    sa.Column('content_html', sa.Text(), nullable=True, comment='帖子内容（HTML格式）'),
    sa.Column('author_id', sa.UUID(as_uuid=False), nullable=False, comment='帖子作者ID'),
    sa.Column('post_type', sa.String(length=20), nullable=False, comment='帖子类型'),
    sa.Column('post_status', sa.String(length=20), nullable=False, comment='帖子状态'),
    sa.Column('parent_id', sa.UUID(as_uuid=False), nullable=True, comment='父帖子ID（回复关系）'),
    sa.Column('reply_to_user_id', sa.UUID(as_uuid=False), nullable=True, comment='回复目标用户ID'),
    sa.Column('is_anonymous', sa.Boolean(), nullable=False, comment='是否匿名发布'),
    sa.Column('allow_comments', sa.Boolean(), nullable=False, comment='是否允许评论'),
    sa.Column('attachments', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='附件信息'),
    sa.Column('images', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='图片URL列表'),
    sa.Column('edit_count', sa.Integer(), nullable=False, comment='编辑次数'),
    sa.Column('last_edited_at', sa.DateTime(timezone=True), nullable=True, comment='最后编辑时间'),
    sa.Column('last_edited_by', sa.UUID(as_uuid=False), nullable=True, comment='最后编辑者ID'),
    sa.Column('edit_reason', sa.String(length=500), nullable=True, comment='编辑原因'),
    sa.Column('view_count', sa.Integer(), nullable=False, comment='浏览次数'),
    sa.Column('like_count', sa.Integer(), nullable=False, comment='点赞数量'),
    sa.Column('comment_count', sa.Integer(), nullable=False, comment='评论数量'),
    sa.Column('published_at', sa.DateTime(timezone=True), nullable=True, comment='发布时间'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='元数据'),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='标签'),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['last_edited_by'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['parent_id'], ['posts.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['reply_to_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('posts', schema=None) as batch_op:
        batch_op.create_index('idx_posts_author_id', ['author_id'], unique=False)
        batch_op.create_index('idx_posts_created_at', ['created_at'], unique=False)
        batch_op.create_index('idx_posts_parent_id', ['parent_id'], unique=False)
        batch_op.create_index('idx_posts_published_at', ['published_at'], unique=False)
        batch_op.create_index('idx_posts_status', ['post_status'], unique=False)
        batch_op.create_index('idx_posts_topic_id', ['topic_id'], unique=False)
        batch_op.create_index('idx_posts_type', ['post_type'], unique=False)

    op.create_table('workflow_edges',
    sa.Column('workflow_id', sa.UUID(as_uuid=False), nullable=False, comment='工作流ID'),
    sa.Column('edge_id', sa.String(length=100), nullable=False, comment='连接ID'),
    sa.Column('source_node_id', sa.String(length=100), nullable=False, comment='源节点ID'),
    sa.Column('target_node_id', sa.String(length=100), nullable=False, comment='目标节点ID'),
    sa.Column('label', sa.String(length=100), nullable=True, comment='连接标签'),
    sa.Column('condition', sa.Text(), nullable=True, comment='执行条件'),
    sa.Column('data_mapping', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='数据映射配置'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflows.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('workflow_id', 'edge_id', name='uk_workflow_edges_unique')
    )
    with op.batch_alter_table('workflow_edges', schema=None) as batch_op:
        batch_op.create_index('idx_workflow_edges_source', ['source_node_id'], unique=False)
        batch_op.create_index('idx_workflow_edges_target', ['target_node_id'], unique=False)
        batch_op.create_index('idx_workflow_edges_workflow_id', ['workflow_id'], unique=False)

    op.create_table('workflow_executions',
    sa.Column('workflow_id', sa.UUID(as_uuid=False), nullable=False, comment='工作流ID'),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False, comment='执行用户ID'),
    sa.Column('execution_mode', sa.String(length=20), nullable=False, comment='执行模式'),
    sa.Column('execution_status', sa.String(length=20), nullable=False, comment='执行状态'),
    sa.Column('input_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='输入数据'),
    sa.Column('output_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='输出数据'),
    sa.Column('execution_log', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='执行日志'),
    sa.Column('node_results', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='节点执行结果'),
    sa.Column('error_code', sa.String(length=50), nullable=True, comment='错误代码'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='错误信息'),
    sa.Column('error_stack', sa.Text(), nullable=True, comment='错误堆栈'),
    sa.Column('failed_node_id', sa.String(length=100), nullable=True, comment='失败的节点ID'),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True, comment='开始时间'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='完成时间'),
    sa.Column('duration_ms', sa.Integer(), nullable=True, comment='执行时长（毫秒）'),
    sa.Column('total_tokens', sa.Integer(), nullable=True, comment='总Token消耗'),
    sa.Column('total_cost', sa.Numeric(precision=10, scale=6), nullable=True, comment='总成本（美元）'),
    sa.Column('retry_count', sa.Integer(), nullable=False, comment='重试次数'),
    sa.Column('parent_execution_id', sa.UUID(as_uuid=False), nullable=True, comment='父执行ID（重试情况）'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.ForeignKeyConstraint(['parent_execution_id'], ['workflow_executions.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflows.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('workflow_executions', schema=None) as batch_op:
        batch_op.create_index('idx_workflow_executions_parent_id', ['parent_execution_id'], unique=False)
        batch_op.create_index('idx_workflow_executions_started_at', ['started_at'], unique=False)
        batch_op.create_index('idx_workflow_executions_status', ['execution_status'], unique=False)
        batch_op.create_index('idx_workflow_executions_user_id', ['user_id'], unique=False)
        batch_op.create_index('idx_workflow_executions_workflow_id', ['workflow_id'], unique=False)

    op.create_table('workflow_nodes',
    sa.Column('workflow_id', sa.UUID(as_uuid=False), nullable=False, comment='工作流ID'),
    sa.Column('node_id', sa.String(length=100), nullable=False, comment='节点ID（工作流内唯一）'),
    sa.Column('node_type', sa.String(length=20), nullable=False, comment='节点类型'),
    sa.Column('node_name', sa.String(length=100), nullable=False, comment='节点名称'),
    sa.Column('description', sa.String(length=500), nullable=True, comment='节点描述'),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='节点配置'),
    sa.Column('adapter_id', sa.UUID(as_uuid=False), nullable=True, comment='适配器ID'),
    sa.Column('adapter_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='适配器配置'),
    sa.Column('position_x', sa.Integer(), nullable=False, comment='X坐标'),
    sa.Column('position_y', sa.Integer(), nullable=False, comment='Y坐标'),
    sa.Column('execution_order', sa.Integer(), nullable=False, comment='执行顺序'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.ForeignKeyConstraint(['adapter_id'], ['adapters.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflows.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('workflow_id', 'node_id', name='uk_workflow_nodes_unique')
    )
    with op.batch_alter_table('workflow_nodes', schema=None) as batch_op:
        batch_op.create_index('idx_workflow_nodes_adapter_id', ['adapter_id'], unique=False)
        batch_op.create_index('idx_workflow_nodes_type', ['node_type'], unique=False)
        batch_op.create_index('idx_workflow_nodes_workflow_id', ['workflow_id'], unique=False)

    op.create_table('build_artifacts',
    sa.Column('task_id', sa.UUID(as_uuid=False), nullable=False, comment='关联任务ID'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='产物名称'),
    sa.Column('filename', sa.String(length=255), nullable=False, comment='文件名'),
    sa.Column('artifact_type', sa.String(length=20), nullable=False, comment='产物类型'),
    sa.Column('description', sa.Text(), nullable=True, comment='产物描述'),
    sa.Column('file_size', sa.BigInteger(), nullable=False, comment='文件大小（字节）'),
    sa.Column('file_hash', sa.String(length=128), nullable=False, comment='文件哈希值'),
    sa.Column('mime_type', sa.String(length=100), nullable=False, comment='MIME类型'),
    sa.Column('storage_path', sa.String(length=500), nullable=False, comment='存储路径'),
    sa.Column('download_url', sa.String(length=500), nullable=True, comment='下载URL'),
    sa.Column('target_platform', sa.String(length=50), nullable=True, comment='目标平台'),
    sa.Column('version', sa.String(length=50), nullable=True, comment='产物版本'),
    sa.Column('is_primary', sa.Boolean(), nullable=False, comment='是否为主要产物'),
    sa.Column('is_published', sa.Boolean(), nullable=False, comment='是否已发布'),
    sa.Column('download_count', sa.Integer(), nullable=False, comment='下载次数'),
    sa.Column('checksum_md5', sa.String(length=32), nullable=True, comment='MD5校验和'),
    sa.Column('checksum_sha1', sa.String(length=40), nullable=True, comment='SHA1校验和'),
    sa.Column('checksum_sha256', sa.String(length=64), nullable=True, comment='SHA256校验和'),
    sa.Column('is_signed', sa.Boolean(), nullable=False, comment='是否已签名'),
    sa.Column('signature', sa.Text(), nullable=True, comment='数字签名'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True, comment='产物过期时间'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='元数据'),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='标签'),
    sa.CheckConstraint('file_size >= 0', name='check_artifact_size_positive'),
    sa.ForeignKeyConstraint(['task_id'], ['packaging_tasks.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('build_artifacts', schema=None) as batch_op:
        batch_op.create_index('idx_build_artifacts_hash', ['file_hash'], unique=False)
        batch_op.create_index('idx_build_artifacts_platform', ['target_platform'], unique=False)
        batch_op.create_index('idx_build_artifacts_primary', ['is_primary'], unique=False)
        batch_op.create_index('idx_build_artifacts_published', ['is_published'], unique=False)
        batch_op.create_index('idx_build_artifacts_task_id', ['task_id'], unique=False)
        batch_op.create_index('idx_build_artifacts_type', ['artifact_type'], unique=False)

    op.create_table('build_logs',
    sa.Column('task_id', sa.UUID(as_uuid=False), nullable=False, comment='关联任务ID'),
    sa.Column('stage', sa.String(length=20), nullable=False, comment='构建阶段'),
    sa.Column('level', sa.String(length=10), nullable=False, comment='日志级别'),
    sa.Column('message', sa.Text(), nullable=False, comment='日志消息'),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='日志时间戳'),
    sa.Column('sequence', sa.Integer(), nullable=False, comment='日志序号'),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='额外日志数据'),
    sa.Column('exception', sa.Text(), nullable=True, comment='异常堆栈信息'),
    sa.Column('worker_id', sa.String(length=100), nullable=True, comment='执行节点ID'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.ForeignKeyConstraint(['task_id'], ['packaging_tasks.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('build_logs', schema=None) as batch_op:
        batch_op.create_index('idx_build_logs_level', ['level'], unique=False)
        batch_op.create_index('idx_build_logs_sequence', ['sequence'], unique=False)
        batch_op.create_index('idx_build_logs_stage', ['stage'], unique=False)
        batch_op.create_index('idx_build_logs_task_id', ['task_id'], unique=False)
        batch_op.create_index('idx_build_logs_timestamp', ['timestamp'], unique=False)

    op.create_table('comments',
    sa.Column('post_id', sa.UUID(as_uuid=False), nullable=False, comment='所属帖子ID'),
    sa.Column('content', sa.Text(), nullable=False, comment='评论内容'),
    sa.Column('author_id', sa.UUID(as_uuid=False), nullable=False, comment='评论作者ID'),
    sa.Column('parent_id', sa.UUID(as_uuid=False), nullable=True, comment='父评论ID'),
    sa.Column('reply_to_user_id', sa.UUID(as_uuid=False), nullable=True, comment='回复目标用户ID'),
    sa.Column('comment_status', sa.String(length=20), nullable=False, comment='评论状态'),
    sa.Column('is_anonymous', sa.Boolean(), nullable=False, comment='是否匿名评论'),
    sa.Column('is_edited', sa.Boolean(), nullable=False, comment='是否已编辑'),
    sa.Column('edited_at', sa.DateTime(timezone=True), nullable=True, comment='编辑时间'),
    sa.Column('like_count', sa.Integer(), nullable=False, comment='点赞数量'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_id'], ['comments.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reply_to_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('comments', schema=None) as batch_op:
        batch_op.create_index('idx_comments_author_id', ['author_id'], unique=False)
        batch_op.create_index('idx_comments_created_at', ['created_at'], unique=False)
        batch_op.create_index('idx_comments_parent_id', ['parent_id'], unique=False)
        batch_op.create_index('idx_comments_post_id', ['post_id'], unique=False)
        batch_op.create_index('idx_comments_status', ['comment_status'], unique=False)

    op.create_table('conversation_contexts',
    sa.Column('conversation_id', sa.UUID(as_uuid=False), nullable=False, comment='对话ID'),
    sa.Column('context_key', sa.String(length=100), nullable=False, comment='上下文键'),
    sa.Column('context_value', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='上下文值'),
    sa.Column('context_type', sa.String(length=50), nullable=False, comment='上下文类型'),
    sa.Column('priority', sa.Integer(), nullable=False, comment='优先级'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True, comment='过期时间'),
    sa.Column('source', sa.String(length=100), nullable=True, comment='上下文来源'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('conversation_id', 'context_key', name='uk_conversation_contexts_unique')
    )
    with op.batch_alter_table('conversation_contexts', schema=None) as batch_op:
        batch_op.create_index('idx_conversation_contexts_conversation_id', ['conversation_id'], unique=False)
        batch_op.create_index('idx_conversation_contexts_key', ['context_key'], unique=False)
        batch_op.create_index('idx_conversation_contexts_type', ['context_type'], unique=False)

    op.create_table('conversation_participants',
    sa.Column('conversation_id', sa.UUID(as_uuid=False), nullable=False, comment='对话ID'),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False, comment='用户ID'),
    sa.Column('role', sa.String(length=20), nullable=False, comment='角色'),
    sa.Column('permissions', postgresql.ARRAY(sa.String()), nullable=True, comment='权限列表'),
    sa.Column('joined_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='加入时间'),
    sa.Column('last_read_at', sa.DateTime(timezone=True), nullable=True, comment='最后阅读时间'),
    sa.Column('last_read_message_id', sa.UUID(as_uuid=False), nullable=True, comment='最后阅读的消息ID'),
    sa.Column('notifications_enabled', sa.Boolean(), nullable=False, comment='是否启用通知'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('conversation_id', 'user_id', name='uk_conversation_participants_unique')
    )
    with op.batch_alter_table('conversation_participants', schema=None) as batch_op:
        batch_op.create_index('idx_conversation_participants_conversation_id', ['conversation_id'], unique=False)
        batch_op.create_index('idx_conversation_participants_user_id', ['user_id'], unique=False)

    op.create_table('file_permissions',
    sa.Column('file_id', sa.UUID(as_uuid=False), nullable=False, comment='文件ID'),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False, comment='被授权用户ID'),
    sa.Column('permission_level', sa.String(length=20), nullable=False, comment='权限级别'),
    sa.Column('granted_by', sa.UUID(as_uuid=False), nullable=False, comment='授权者ID'),
    sa.Column('granted_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='授权时间'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True, comment='权限过期时间'),
    sa.Column('can_read', sa.Boolean(), nullable=False, comment='是否可读取'),
    sa.Column('can_write', sa.Boolean(), nullable=False, comment='是否可写入'),
    sa.Column('can_delete', sa.Boolean(), nullable=False, comment='是否可删除'),
    sa.Column('can_share', sa.Boolean(), nullable=False, comment='是否可分享'),
    sa.Column('can_manage_permissions', sa.Boolean(), nullable=False, comment='是否可管理权限'),
    sa.Column('notes', sa.String(length=500), nullable=True, comment='权限备注'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.ForeignKeyConstraint(['file_id'], ['files.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['granted_by'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('file_id', 'user_id', name='uk_file_permissions_unique')
    )
    with op.batch_alter_table('file_permissions', schema=None) as batch_op:
        batch_op.create_index('idx_file_permissions_expires_at', ['expires_at'], unique=False)
        batch_op.create_index('idx_file_permissions_file_id', ['file_id'], unique=False)
        batch_op.create_index('idx_file_permissions_level', ['permission_level'], unique=False)
        batch_op.create_index('idx_file_permissions_user_id', ['user_id'], unique=False)

    op.create_table('file_shares',
    sa.Column('file_id', sa.UUID(as_uuid=False), nullable=False, comment='文件ID'),
    sa.Column('shared_by', sa.UUID(as_uuid=False), nullable=False, comment='分享者ID'),
    sa.Column('share_token', sa.String(length=64), nullable=False, comment='分享令牌'),
    sa.Column('share_type', sa.String(length=20), nullable=False, comment='分享类型'),
    sa.Column('share_name', sa.String(length=200), nullable=True, comment='分享名称'),
    sa.Column('share_description', sa.Text(), nullable=True, comment='分享描述'),
    sa.Column('password', sa.String(length=255), nullable=True, comment='访问密码（哈希）'),
    sa.Column('max_downloads', sa.Integer(), nullable=True, comment='最大下载次数'),
    sa.Column('max_views', sa.Integer(), nullable=True, comment='最大查看次数'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True, comment='分享过期时间'),
    sa.Column('allow_download', sa.Boolean(), nullable=False, comment='是否允许下载'),
    sa.Column('allow_preview', sa.Boolean(), nullable=False, comment='是否允许预览'),
    sa.Column('require_login', sa.Boolean(), nullable=False, comment='是否需要登录'),
    sa.Column('view_count', sa.Integer(), nullable=False, comment='查看次数'),
    sa.Column('download_count', sa.Integer(), nullable=False, comment='下载次数'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='是否激活'),
    sa.Column('access_log', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='访问日志'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.ForeignKeyConstraint(['file_id'], ['files.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['shared_by'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('share_token')
    )
    with op.batch_alter_table('file_shares', schema=None) as batch_op:
        batch_op.create_index('idx_file_shares_active', ['is_active'], unique=False)
        batch_op.create_index('idx_file_shares_expires_at', ['expires_at'], unique=False)
        batch_op.create_index('idx_file_shares_file_id', ['file_id'], unique=False)
        batch_op.create_index('idx_file_shares_shared_by', ['shared_by'], unique=False)
        batch_op.create_index('idx_file_shares_token', ['share_token'], unique=False)
        batch_op.create_index('idx_file_shares_type', ['share_type'], unique=False)

    op.create_table('file_versions',
    sa.Column('file_id', sa.UUID(as_uuid=False), nullable=False, comment='文件ID'),
    sa.Column('version_number', sa.String(length=50), nullable=False, comment='版本号'),
    sa.Column('version_type', sa.String(length=20), nullable=False, comment='版本类型'),
    sa.Column('title', sa.String(length=200), nullable=True, comment='版本标题'),
    sa.Column('description', sa.Text(), nullable=True, comment='版本描述'),
    sa.Column('changelog', sa.Text(), nullable=True, comment='更新日志'),
    sa.Column('created_by', sa.UUID(as_uuid=False), nullable=False, comment='版本创建者ID'),
    sa.Column('file_size', sa.BigInteger(), nullable=False, comment='文件大小'),
    sa.Column('file_hash', sa.String(length=128), nullable=False, comment='文件哈希值'),
    sa.Column('storage_path', sa.String(length=500), nullable=False, comment='存储路径'),
    sa.Column('is_current', sa.Boolean(), nullable=False, comment='是否为当前版本'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('download_count', sa.Integer(), nullable=False, comment='下载次数'),
    sa.Column('diff_from_previous', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='与前一版本的差异'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['file_id'], ['files.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('file_id', 'version_number', name='uk_file_versions_unique')
    )
    with op.batch_alter_table('file_versions', schema=None) as batch_op:
        batch_op.create_index('idx_file_versions_created_by', ['created_by'], unique=False)
        batch_op.create_index('idx_file_versions_current', ['is_current'], unique=False)
        batch_op.create_index('idx_file_versions_file_id', ['file_id'], unique=False)
        batch_op.create_index('idx_file_versions_hash', ['file_hash'], unique=False)
        batch_op.create_index('idx_file_versions_version', ['version_number'], unique=False)

    op.create_table('messages',
    sa.Column('conversation_id', sa.UUID(as_uuid=False), nullable=False, comment='对话ID'),
    sa.Column('role', sa.String(length=20), nullable=False, comment='消息角色'),
    sa.Column('message_type', sa.String(length=20), nullable=False, comment='消息类型'),
    sa.Column('content', sa.Text(), nullable=False, comment='消息内容'),
    sa.Column('message_status', sa.String(length=20), nullable=False, comment='消息状态'),
    sa.Column('model', sa.String(length=100), nullable=True, comment='使用的模型'),
    sa.Column('model_provider', sa.String(length=50), nullable=True, comment='模型提供商'),
    sa.Column('prompt_tokens', sa.Integer(), nullable=True, comment='输入Token数'),
    sa.Column('completion_tokens', sa.Integer(), nullable=True, comment='输出Token数'),
    sa.Column('total_tokens', sa.Integer(), nullable=True, comment='总Token数'),
    sa.Column('cost', sa.Numeric(precision=10, scale=6), nullable=True, comment='消息成本（美元）'),
    sa.Column('adapter_used', sa.String(length=100), nullable=True, comment='使用的适配器'),
    sa.Column('adapter_result', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='适配器执行结果'),
    sa.Column('function_name', sa.String(length=100), nullable=True, comment='调用的函数名'),
    sa.Column('function_arguments', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='函数参数'),
    sa.Column('function_result', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='函数返回结果'),
    sa.Column('error_code', sa.String(length=50), nullable=True, comment='错误代码'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='错误信息'),
    sa.Column('sequence', sa.Integer(), nullable=False, comment='消息序号'),
    sa.Column('parent_id', sa.UUID(as_uuid=False), nullable=True, comment='父消息ID'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='元数据'),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='标签'),
    sa.CheckConstraint('total_tokens IS NULL OR total_tokens >= 0', name='check_total_tokens'),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_id'], ['messages.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('messages', schema=None) as batch_op:
        batch_op.create_index('idx_messages_conversation_created', ['conversation_id', 'created_at'], unique=False)
        batch_op.create_index('idx_messages_conversation_id', ['conversation_id'], unique=False)
        batch_op.create_index('idx_messages_parent_id', ['parent_id'], unique=False)
        batch_op.create_index('idx_messages_role', ['role'], unique=False)
        batch_op.create_index('idx_messages_sequence', ['sequence'], unique=False)
        batch_op.create_index('idx_messages_status', ['message_status'], unique=False)

    op.create_table('message_attachments',
    sa.Column('message_id', sa.UUID(as_uuid=False), nullable=False, comment='消息ID'),
    sa.Column('attachment_type', sa.String(length=20), nullable=False, comment='附件类型'),
    sa.Column('filename', sa.String(length=255), nullable=False, comment='文件名'),
    sa.Column('original_filename', sa.String(length=255), nullable=False, comment='原始文件名'),
    sa.Column('file_size', sa.Integer(), nullable=False, comment='文件大小（字节）'),
    sa.Column('mime_type', sa.String(length=100), nullable=False, comment='MIME类型'),
    sa.Column('storage_path', sa.String(length=500), nullable=False, comment='存储路径'),
    sa.Column('storage_url', sa.String(length=500), nullable=True, comment='访问URL'),
    sa.Column('file_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='文件元数据'),
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='更新时间'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='删除时间'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='是否已删除'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='记录状态'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='创建者'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='更新者'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.ForeignKeyConstraint(['message_id'], ['messages.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('message_attachments', schema=None) as batch_op:
        batch_op.create_index('idx_message_attachments_message_id', ['message_id'], unique=False)
        batch_op.create_index('idx_message_attachments_type', ['attachment_type'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('message_attachments', schema=None) as batch_op:
        batch_op.drop_index('idx_message_attachments_type')
        batch_op.drop_index('idx_message_attachments_message_id')

    op.drop_table('message_attachments')
    with op.batch_alter_table('messages', schema=None) as batch_op:
        batch_op.drop_index('idx_messages_status')
        batch_op.drop_index('idx_messages_sequence')
        batch_op.drop_index('idx_messages_role')
        batch_op.drop_index('idx_messages_parent_id')
        batch_op.drop_index('idx_messages_conversation_id')
        batch_op.drop_index('idx_messages_conversation_created')

    op.drop_table('messages')
    with op.batch_alter_table('file_versions', schema=None) as batch_op:
        batch_op.drop_index('idx_file_versions_version')
        batch_op.drop_index('idx_file_versions_hash')
        batch_op.drop_index('idx_file_versions_file_id')
        batch_op.drop_index('idx_file_versions_current')
        batch_op.drop_index('idx_file_versions_created_by')

    op.drop_table('file_versions')
    with op.batch_alter_table('file_shares', schema=None) as batch_op:
        batch_op.drop_index('idx_file_shares_type')
        batch_op.drop_index('idx_file_shares_token')
        batch_op.drop_index('idx_file_shares_shared_by')
        batch_op.drop_index('idx_file_shares_file_id')
        batch_op.drop_index('idx_file_shares_expires_at')
        batch_op.drop_index('idx_file_shares_active')

    op.drop_table('file_shares')
    with op.batch_alter_table('file_permissions', schema=None) as batch_op:
        batch_op.drop_index('idx_file_permissions_user_id')
        batch_op.drop_index('idx_file_permissions_level')
        batch_op.drop_index('idx_file_permissions_file_id')
        batch_op.drop_index('idx_file_permissions_expires_at')

    op.drop_table('file_permissions')
    with op.batch_alter_table('conversation_participants', schema=None) as batch_op:
        batch_op.drop_index('idx_conversation_participants_user_id')
        batch_op.drop_index('idx_conversation_participants_conversation_id')

    op.drop_table('conversation_participants')
    with op.batch_alter_table('conversation_contexts', schema=None) as batch_op:
        batch_op.drop_index('idx_conversation_contexts_type')
        batch_op.drop_index('idx_conversation_contexts_key')
        batch_op.drop_index('idx_conversation_contexts_conversation_id')

    op.drop_table('conversation_contexts')
    with op.batch_alter_table('comments', schema=None) as batch_op:
        batch_op.drop_index('idx_comments_status')
        batch_op.drop_index('idx_comments_post_id')
        batch_op.drop_index('idx_comments_parent_id')
        batch_op.drop_index('idx_comments_created_at')
        batch_op.drop_index('idx_comments_author_id')

    op.drop_table('comments')
    with op.batch_alter_table('build_logs', schema=None) as batch_op:
        batch_op.drop_index('idx_build_logs_timestamp')
        batch_op.drop_index('idx_build_logs_task_id')
        batch_op.drop_index('idx_build_logs_stage')
        batch_op.drop_index('idx_build_logs_sequence')
        batch_op.drop_index('idx_build_logs_level')

    op.drop_table('build_logs')
    with op.batch_alter_table('build_artifacts', schema=None) as batch_op:
        batch_op.drop_index('idx_build_artifacts_type')
        batch_op.drop_index('idx_build_artifacts_task_id')
        batch_op.drop_index('idx_build_artifacts_published')
        batch_op.drop_index('idx_build_artifacts_primary')
        batch_op.drop_index('idx_build_artifacts_platform')
        batch_op.drop_index('idx_build_artifacts_hash')

    op.drop_table('build_artifacts')
    with op.batch_alter_table('workflow_nodes', schema=None) as batch_op:
        batch_op.drop_index('idx_workflow_nodes_workflow_id')
        batch_op.drop_index('idx_workflow_nodes_type')
        batch_op.drop_index('idx_workflow_nodes_adapter_id')

    op.drop_table('workflow_nodes')
    with op.batch_alter_table('workflow_executions', schema=None) as batch_op:
        batch_op.drop_index('idx_workflow_executions_workflow_id')
        batch_op.drop_index('idx_workflow_executions_user_id')
        batch_op.drop_index('idx_workflow_executions_status')
        batch_op.drop_index('idx_workflow_executions_started_at')
        batch_op.drop_index('idx_workflow_executions_parent_id')

    op.drop_table('workflow_executions')
    with op.batch_alter_table('workflow_edges', schema=None) as batch_op:
        batch_op.drop_index('idx_workflow_edges_workflow_id')
        batch_op.drop_index('idx_workflow_edges_target')
        batch_op.drop_index('idx_workflow_edges_source')

    op.drop_table('workflow_edges')
    with op.batch_alter_table('posts', schema=None) as batch_op:
        batch_op.drop_index('idx_posts_type')
        batch_op.drop_index('idx_posts_topic_id')
        batch_op.drop_index('idx_posts_status')
        batch_op.drop_index('idx_posts_published_at')
        batch_op.drop_index('idx_posts_parent_id')
        batch_op.drop_index('idx_posts_created_at')
        batch_op.drop_index('idx_posts_author_id')

    op.drop_table('posts')
    with op.batch_alter_table('packaging_tasks', schema=None) as batch_op:
        batch_op.drop_index('idx_packaging_tasks_user_id')
        batch_op.drop_index('idx_packaging_tasks_template_id')
        batch_op.drop_index('idx_packaging_tasks_status')
        batch_op.drop_index('idx_packaging_tasks_scheduled_at')
        batch_op.drop_index('idx_packaging_tasks_priority')
        batch_op.drop_index('idx_packaging_tasks_created_at')
        batch_op.drop_index('idx_packaging_tasks_adapter_id')

    op.drop_table('packaging_tasks')
    with op.batch_alter_table('files', schema=None) as batch_op:
        batch_op.drop_index('idx_files_status')
        batch_op.drop_index('idx_files_public')
        batch_op.drop_index('idx_files_parent_id')
        batch_op.drop_index('idx_files_owner_id')
        batch_op.drop_index('idx_files_hash')
        batch_op.drop_index('idx_files_filename')
        batch_op.drop_index('idx_files_file_type')
        batch_op.drop_index('idx_files_expires_at')
        batch_op.drop_index('idx_files_category')
        batch_op.drop_index('idx_files_adapter_id')

    op.drop_table('files')
    with op.batch_alter_table('conversations', schema=None) as batch_op:
        batch_op.drop_index('idx_conversations_user_id')
        batch_op.drop_index('idx_conversations_status')
        batch_op.drop_index('idx_conversations_share_token')
        batch_op.drop_index('idx_conversations_last_message_at')
        batch_op.drop_index('idx_conversations_character_id')

    op.drop_table('conversations')
    with op.batch_alter_table('character_voices', schema=None) as batch_op:
        batch_op.drop_index('idx_character_voices_provider')
        batch_op.drop_index('idx_character_voices_character_id')

    op.drop_table('character_voices')
    with op.batch_alter_table('character_personalities', schema=None) as batch_op:
        batch_op.drop_index('idx_character_personalities_character_id')

    op.drop_table('character_personalities')
    with op.batch_alter_table('character_models', schema=None) as batch_op:
        batch_op.drop_index('idx_character_models_type')
        batch_op.drop_index('idx_character_models_character_id')

    op.drop_table('character_models')
    with op.batch_alter_table('character_expressions', schema=None) as batch_op:
        batch_op.drop_index('idx_character_expressions_type')
        batch_op.drop_index('idx_character_expressions_character_id')

    op.drop_table('character_expressions')
    with op.batch_alter_table('adapter_versions', schema=None) as batch_op:
        batch_op.drop_index('idx_adapter_versions_version')
        batch_op.drop_index('idx_adapter_versions_published_at')
        batch_op.drop_index('idx_adapter_versions_adapter_id')

    op.drop_table('adapter_versions')
    with op.batch_alter_table('adapter_ratings', schema=None) as batch_op:
        batch_op.drop_index('idx_adapter_ratings_user_id')
        batch_op.drop_index('idx_adapter_ratings_type')
        batch_op.drop_index('idx_adapter_ratings_rating')
        batch_op.drop_index('idx_adapter_ratings_created_at')
        batch_op.drop_index('idx_adapter_ratings_adapter_id')

    op.drop_table('adapter_ratings')
    with op.batch_alter_table('adapter_downloads', schema=None) as batch_op:
        batch_op.drop_index('idx_adapter_downloads_user_id')
        batch_op.drop_index('idx_adapter_downloads_ip')
        batch_op.drop_index('idx_adapter_downloads_created_at')
        batch_op.drop_index('idx_adapter_downloads_country')
        batch_op.drop_index('idx_adapter_downloads_adapter_id')

    op.drop_table('adapter_downloads')
    with op.batch_alter_table('adapter_dependencies', schema=None) as batch_op:
        batch_op.drop_index('idx_adapter_dependencies_type')
        batch_op.drop_index('idx_adapter_dependencies_name')
        batch_op.drop_index('idx_adapter_dependencies_adapter_id')

    op.drop_table('adapter_dependencies')
    with op.batch_alter_table('workflows', schema=None) as batch_op:
        batch_op.drop_index('idx_workflows_visibility')
        batch_op.drop_index('idx_workflows_user_id')
        batch_op.drop_index('idx_workflows_status')
        batch_op.drop_index('idx_workflows_slug')
        batch_op.drop_index('idx_workflows_is_template')
        batch_op.drop_index('idx_workflows_category')

    op.drop_table('workflows')
    with op.batch_alter_table('workflow_templates', schema=None) as batch_op:
        batch_op.drop_index('idx_workflow_templates_slug')
        batch_op.drop_index('idx_workflow_templates_official')
        batch_op.drop_index('idx_workflow_templates_featured')
        batch_op.drop_index('idx_workflow_templates_category')
        batch_op.drop_index('idx_workflow_templates_author_id')

    op.drop_table('workflow_templates')
    with op.batch_alter_table('user_sessions', schema=None) as batch_op:
        batch_op.drop_index('idx_user_sessions_user_id')
        batch_op.drop_index('idx_user_sessions_token')
        batch_op.drop_index('idx_user_sessions_status')
        batch_op.drop_index('idx_user_sessions_refresh_token')
        batch_op.drop_index('idx_user_sessions_expires_at')

    op.drop_table('user_sessions')
    with op.batch_alter_table('user_profiles', schema=None) as batch_op:
        batch_op.drop_index('idx_user_profiles_user_id')
        batch_op.drop_index('idx_user_profiles_github')

    op.drop_table('user_profiles')
    with op.batch_alter_table('user_preferences', schema=None) as batch_op:
        batch_op.drop_index('idx_user_preferences_user_id')

    op.drop_table('user_preferences')
    with op.batch_alter_table('user_permissions', schema=None) as batch_op:
        batch_op.drop_index('idx_user_permissions_user_id')
        batch_op.drop_index('idx_user_permissions_resource')
        batch_op.drop_index('idx_user_permissions_permission')

    op.drop_table('user_permissions')
    with op.batch_alter_table('topics', schema=None) as batch_op:
        batch_op.drop_index('idx_topics_sticky')
        batch_op.drop_index('idx_topics_status')
        batch_op.drop_index('idx_topics_slug')
        batch_op.drop_index('idx_topics_last_post_at')
        batch_op.drop_index('idx_topics_forum_id')
        batch_op.drop_index('idx_topics_featured')
        batch_op.drop_index('idx_topics_author_id')

    op.drop_table('topics')
    with op.batch_alter_table('package_templates', schema=None) as batch_op:
        batch_op.drop_index('idx_package_templates_verified')
        batch_op.drop_index('idx_package_templates_type')
        batch_op.drop_index('idx_package_templates_slug')
        batch_op.drop_index('idx_package_templates_public')
        batch_op.drop_index('idx_package_templates_package_type')
        batch_op.drop_index('idx_package_templates_author_id')

    op.drop_table('package_templates')
    with op.batch_alter_table('likes', schema=None) as batch_op:
        batch_op.drop_index('idx_likes_user_id')
        batch_op.drop_index('idx_likes_type')
        batch_op.drop_index('idx_likes_target')

    op.drop_table('likes')
    with op.batch_alter_table('follows', schema=None) as batch_op:
        batch_op.drop_index('idx_follows_target')
        batch_op.drop_index('idx_follows_follower_id')

    op.drop_table('follows')
    with op.batch_alter_table('characters', schema=None) as batch_op:
        batch_op.drop_index('idx_characters_type')
        batch_op.drop_index('idx_characters_slug')
        batch_op.drop_index('idx_characters_public')
        batch_op.drop_index('idx_characters_name')
        batch_op.drop_index('idx_characters_featured')
        batch_op.drop_index('idx_characters_author_id')

    op.drop_table('characters')
    with op.batch_alter_table('adapters', schema=None) as batch_op:
        batch_op.drop_index('idx_adapters_visibility')
        batch_op.drop_index('idx_adapters_verified')
        batch_op.drop_index('idx_adapters_type')
        batch_op.drop_index('idx_adapters_status')
        batch_op.drop_index('idx_adapters_slug')
        batch_op.drop_index('idx_adapters_published_at')
        batch_op.drop_index('idx_adapters_name')
        batch_op.drop_index('idx_adapters_featured')
        batch_op.drop_index('idx_adapters_category')
        batch_op.drop_index('idx_adapters_author_id')

    op.drop_table('adapters')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index('idx_users_verification_token')
        batch_op.drop_index('idx_users_username')
        batch_op.drop_index('idx_users_status')
        batch_op.drop_index('idx_users_role')
        batch_op.drop_index('idx_users_reset_token')
        batch_op.drop_index('idx_users_email')

    op.drop_table('users')
    with op.batch_alter_table('forums', schema=None) as batch_op:
        batch_op.drop_index('idx_forums_type')
        batch_op.drop_index('idx_forums_slug')
        batch_op.drop_index('idx_forums_public')
        batch_op.drop_index('idx_forums_parent_id')

    op.drop_table('forums')
    with op.batch_alter_table('adapter_categories', schema=None) as batch_op:
        batch_op.drop_index('idx_adapter_categories_type')
        batch_op.drop_index('idx_adapter_categories_slug')
        batch_op.drop_index('idx_adapter_categories_parent_id')

    op.drop_table('adapter_categories')
    # ### end Alembic commands ###

