name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本 (例如: v1.0.0)'
        required: true
        type: string
      pre_release:
        description: '是否为预发布版本'
        required: false
        type: boolean
        default: false
      draft:
        description: '是否为草稿发布'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

defaults:
  run:
    working-directory: desktop_app

jobs:
  # 版本检查和准备
  prepare-release:
    name: 准备发布
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      is_draft: ${{ steps.version.outputs.is_draft }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 确定版本信息
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION="${{ github.ref_name }}"
            TAG_NAME="${{ github.ref_name }}"
            IS_PRERELEASE="false"
            IS_DRAFT="false"
          else
            VERSION="${{ github.event.inputs.version }}"
            TAG_NAME="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.pre_release }}"
            IS_DRAFT="${{ github.event.inputs.draft }}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT
          echo "is_draft=${IS_DRAFT}" >> $GITHUB_OUTPUT
          
          echo "发布版本: ${VERSION}"
          echo "标签名称: ${TAG_NAME}"
          echo "预发布: ${IS_PRERELEASE}"
          echo "草稿: ${IS_DRAFT}"

      - name: 验证版本格式
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "错误: 版本格式无效: $VERSION"
            echo "正确格式: v1.0.0 或 v1.0.0-beta"
            exit 1
          fi

      - name: 检查版本是否已存在
        run: |
          TAG_NAME="${{ steps.version.outputs.tag_name }}"
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "错误: 标签 $TAG_NAME 已存在"
            exit 1
          fi

  # 多平台构建
  build:
    name: 构建 ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    needs: prepare-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'windows-latest'
            os: 'windows-latest'
            rust_target: 'x86_64-pc-windows-msvc'
            arch: 'x64'
            ext: '.exe'
          - platform: 'windows-arm64'
            os: 'windows-latest'
            rust_target: 'aarch64-pc-windows-msvc'
            arch: 'arm64'
            ext: '.exe'
          - platform: 'macos-latest'
            os: 'macos-latest'
            rust_target: 'x86_64-apple-darwin'
            arch: 'x64'
            ext: ''
          - platform: 'macos-arm64'
            os: 'macos-latest'
            rust_target: 'aarch64-apple-darwin'
            arch: 'arm64'
            ext: ''
          - platform: 'ubuntu-latest'
            os: 'ubuntu-latest'
            rust_target: 'x86_64-unknown-linux-gnu'
            arch: 'x64'
            ext: ''

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: desktop_app/package-lock.json

      - name: 设置 Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}

      - name: Rust 缓存
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "desktop_app/src-tauri -> target"
          key: ${{ matrix.rust_target }}

      - name: 安装系统依赖 (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev

      - name: 安装依赖
        run: npm ci

      - name: 更新版本号
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          VERSION_NUMBER="${VERSION#v}"
          
          # 更新 package.json
          npm version $VERSION_NUMBER --no-git-tag-version
          
          # 更新 Cargo.toml
          cd src-tauri
          sed -i.bak "s/^version = \".*\"/version = \"$VERSION_NUMBER\"/" Cargo.toml
          rm -f Cargo.toml.bak
          
          # 更新 tauri.conf.json
          sed -i.bak "s/\"version\": \".*\"/\"version\": \"$VERSION_NUMBER\"/" tauri.conf.json
          rm -f tauri.conf.json.bak

      - name: 导入代码签名证书 (Windows)
        if: matrix.os == 'windows-latest' && secrets.WINDOWS_CERTIFICATE != ''
        run: |
          echo "${{ secrets.WINDOWS_CERTIFICATE }}" | base64 --decode > certificate.p12
          echo "WINDOWS_CERTIFICATE_PATH=$PWD/certificate.p12" >> $GITHUB_ENV
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}

      - name: 导入代码签名证书 (macOS)
        if: matrix.os == 'macos-latest' && secrets.APPLE_CERTIFICATE != ''
        run: |
          echo "${{ secrets.APPLE_CERTIFICATE }}" | base64 --decode > certificate.p12
          security create-keychain -p "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" build.keychain
          security import certificate.p12 -k build.keychain -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" build.keychain
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}

      - name: 构建应用
        run: npm run tauri:build -- --target ${{ matrix.rust_target }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          WINDOWS_CERTIFICATE_PATH: ${{ env.WINDOWS_CERTIFICATE_PATH }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}

      - name: 重命名构建产物
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          ARCH="${{ matrix.arch }}"
          
          cd src-tauri/target/${{ matrix.rust_target }}/release/bundle
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows 安装包
            if [[ -d "msi" ]]; then
              for file in msi/*.msi; do
                if [[ -f "$file" ]]; then
                  mv "$file" "msi/zishu-sensei_${VERSION}_${ARCH}.msi"
                fi
              done
            fi
            if [[ -d "nsis" ]]; then
              for file in nsis/*.exe; do
                if [[ -f "$file" ]]; then
                  mv "$file" "nsis/zishu-sensei_${VERSION}_${ARCH}-setup.exe"
                fi
              done
            fi
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # macOS 应用包
            if [[ -d "macos" ]]; then
              for file in macos/*.app; do
                if [[ -d "$file" ]]; then
                  tar -czf "macos/zishu-sensei_${VERSION}_${ARCH}.app.tar.gz" -C "macos" "$(basename "$file")"
                fi
              done
              for file in macos/*.dmg; do
                if [[ -f "$file" ]]; then
                  mv "$file" "macos/zishu-sensei_${VERSION}_${ARCH}.dmg"
                fi
              done
            fi
          else
            # Linux 包
            if [[ -d "deb" ]]; then
              for file in deb/*.deb; do
                if [[ -f "$file" ]]; then
                  mv "$file" "deb/zishu-sensei_${VERSION}_${ARCH}.deb"
                fi
              done
            fi
            if [[ -d "rpm" ]]; then
              for file in rpm/*.rpm; do
                if [[ -f "$file" ]]; then
                  mv "$file" "rpm/zishu-sensei_${VERSION}_${ARCH}.rpm"
                fi
              done
            fi
            if [[ -d "appimage" ]]; then
              for file in appimage/*.AppImage; do
                if [[ -f "$file" ]]; then
                  mv "$file" "appimage/zishu-sensei_${VERSION}_${ARCH}.AppImage"
                fi
              done
            fi
          fi

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}
          path: |
            desktop_app/src-tauri/target/${{ matrix.rust_target }}/release/bundle/**/*
          retention-days: 7

  # 创建发布
  create-release:
    name: 创建发布
    runs-on: ubuntu-latest
    needs: [prepare-release, build]
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: 生成更新日志
        id: changelog
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          
          # 生成更新日志
          if [[ -f "CHANGELOG.md" ]]; then
            # 从 CHANGELOG.md 提取当前版本的更新内容
            CHANGELOG=$(awk "/^## \[?${VERSION#v}\]?/ {flag=1; next} /^## / {flag=0} flag" CHANGELOG.md || echo "")
          else
            # 如果没有 CHANGELOG.md，从 git 历史生成
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [[ -n "$PREVIOUS_TAG" ]]; then
              CHANGELOG=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD)
            else
              CHANGELOG="首次发布"
            fi
          fi
          
          if [[ -z "$CHANGELOG" ]]; then
            CHANGELOG="此版本的更新内容请查看提交历史。"
          fi
          
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 创建 GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag_name }}
          release_name: Zishu Sensei ${{ needs.prepare-release.outputs.version }}
          body: |
            ## 🎉 Zishu Sensei ${{ needs.prepare-release.outputs.version }}
            
            ### 📋 更新内容
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ### 📦 安装包下载
            
            请根据您的操作系统选择对应的安装包：
            
            #### Windows
            - **MSI 安装包** (推荐): `zishu-sensei_${{ needs.prepare-release.outputs.version }}_x64.msi`
            - **EXE 安装包**: `zishu-sensei_${{ needs.prepare-release.outputs.version }}_x64-setup.exe`
            - **ARM64 版本**: `zishu-sensei_${{ needs.prepare-release.outputs.version }}_arm64.msi`
            
            #### macOS
            - **DMG 镜像** (推荐): `zishu-sensei_${{ needs.prepare-release.outputs.version }}_x64.dmg`
            - **App 压缩包**: `zishu-sensei_${{ needs.prepare-release.outputs.version }}_x64.app.tar.gz`
            - **Apple Silicon**: `zishu-sensei_${{ needs.prepare-release.outputs.version }}_arm64.dmg`
            
            #### Linux
            - **DEB 包** (Ubuntu/Debian): `zishu-sensei_${{ needs.prepare-release.outputs.version }}_x64.deb`
            - **RPM 包** (RedHat/SUSE): `zishu-sensei_${{ needs.prepare-release.outputs.version }}_x64.rpm`
            - **AppImage** (通用): `zishu-sensei_${{ needs.prepare-release.outputs.version }}_x64.AppImage`
            
            ### 🔐 安全验证
            所有发布的安装包都经过数字签名，请验证签名后再安装。
            
            ### 📖 文档
            - [用户手册](https://docs.zishu.dev)
            - [安装指南](https://docs.zishu.dev/installation)
            - [更新说明](https://docs.zishu.dev/changelog)
            
            ### 🐛 问题反馈
            如果遇到问题，请在 [Issues](https://github.com/zishu-team/zishu-sensei/issues) 中反馈。

          draft: ${{ needs.prepare-release.outputs.is_draft }}
          prerelease: ${{ needs.prepare-release.outputs.is_prerelease }}

  # 上传发布资产
  upload-assets:
    name: 上传发布资产
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    strategy:
      matrix:
        platform: [windows-latest, windows-arm64, macos-latest, macos-arm64, ubuntu-latest]
    steps:
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.platform }}
          path: artifacts/

      - name: 上传资产文件
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          UPLOAD_URL="${{ needs.create-release.outputs.upload_url }}"
          
          find artifacts/ -type f \( -name "*.msi" -o -name "*.exe" -o -name "*.dmg" -o -name "*.tar.gz" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" \) | while read file; do
            filename=$(basename "$file")
            echo "上传文件: $filename"
            
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${UPLOAD_URL%\{*}?name=$filename"
          done

  # 更新检查服务
  update-server:
    name: 更新检查服务
    runs-on: ubuntu-latest
    needs: [prepare-release, upload-assets]
    if: success()
    steps:
      - name: 通知更新服务器
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          
          # 调用更新服务器 API
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.UPDATE_SERVER_TOKEN }}" \
            -d '{
              "version": "'$VERSION'",
              "release_notes": "新版本 '$VERSION' 已发布",
              "download_urls": {
                "windows-x64": "https://github.com/zishu-team/zishu-sensei/releases/download/'$VERSION'/zishu-sensei_'$VERSION'_x64.msi",
                "windows-arm64": "https://github.com/zishu-team/zishu-sensei/releases/download/'$VERSION'/zishu-sensei_'$VERSION'_arm64.msi",
                "macos-x64": "https://github.com/zishu-team/zishu-sensei/releases/download/'$VERSION'/zishu-sensei_'$VERSION'_x64.dmg",
                "macos-arm64": "https://github.com/zishu-team/zishu-sensei/releases/download/'$VERSION'/zishu-sensei_'$VERSION'_arm64.dmg",
                "linux-x64": "https://github.com/zishu-team/zishu-sensei/releases/download/'$VERSION'/zishu-sensei_'$VERSION'_x64.deb"
              }
            }' \
            "https://update.zishu.dev/api/releases" || echo "更新服务器通知失败，请手动更新"

  # 部署后处理
  post-release:
    name: 发布后处理
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release, upload-assets, update-server]
    if: always()
    steps:
      - name: 发布成功通知
        if: success()
        run: |
          echo "🎉 版本 ${{ needs.prepare-release.outputs.version }} 发布成功！"
          echo "发布地址: https://github.com/zishu-team/zishu-sensei/releases/tag/${{ needs.prepare-release.outputs.tag_name }}"

      - name: 发布失败通知
        if: failure()
        run: |
          echo "❌ 版本 ${{ needs.prepare-release.outputs.version }} 发布失败！"
          echo "请检查构建日志并重试。"

      - name: 发送通知到 Discord/Telegram (可选)
        if: success() && secrets.DISCORD_WEBHOOK != ''
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          RELEASE_URL="https://github.com/zishu-team/zishu-sensei/releases/tag/${{ needs.prepare-release.outputs.tag_name }}"
          
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{
              "content": "🎉 **Zishu Sensei '$VERSION'** 已发布！\n\n📦 [下载地址]('$RELEASE_URL')\n🚀 快来体验新功能吧！"
            }' \
            "${{ secrets.DISCORD_WEBHOOK }}" || echo "Discord 通知发送失败"