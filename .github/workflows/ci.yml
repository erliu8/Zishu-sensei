name: CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'desktop_app/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'desktop_app/**'
      - '.github/workflows/**'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

defaults:
  run:
    working-directory: desktop_app

jobs:
  # 代码质量检查
  code-quality:
    name: 代码质量检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: desktop_app/package-lock.json

      - name: 安装前端依赖
        run: npm ci

      - name: TypeScript 类型检查
        run: npm run type-check

      - name: ESLint 代码检查
        run: npm run lint

      - name: Prettier 格式检查
        run: npm run format:check

      - name: 设置 Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Rust 缓存
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "desktop_app/src-tauri -> target"

      - name: Rust 格式检查
        run: cd src-tauri && cargo fmt --all -- --check

      - name: Rust Clippy 检查
        run: cd src-tauri && cargo clippy --all-targets --all-features -- -D warnings

  # 安全扫描
  security:
    name: 安全扫描
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: desktop_app/package-lock.json

      - name: 安装前端依赖
        run: npm ci

      - name: npm 安全审计
        run: npm audit --audit-level moderate

      - name: 设置 Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust 缓存
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "desktop_app/src-tauri -> target"

      - name: 安装 cargo-audit
        run: cargo install cargo-audit

      - name: Rust 安全审计
        run: cd src-tauri && cargo audit

      - name: CodeQL 分析
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript

      - name: 执行 CodeQL 分析
        uses: github/codeql-action/analyze@v3

  # 前端测试
  frontend-tests:
    name: 前端测试
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: desktop_app/package-lock.json

      - name: 安装依赖
        run: npm ci

      - name: 运行单元测试
        run: npm run test:run

      - name: 运行集成测试
        run: npm run test:integration

      - name: 生成测试覆盖率报告
        run: npm run test:coverage

      - name: 上传覆盖率报告到 Codecov
        uses: codecov/codecov-action@v4
        with:
          files: desktop_app/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # 后端测试
  backend-tests:
    name: 后端测试
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust 缓存
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "desktop_app/src-tauri -> target"

      - name: 安装系统依赖 (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev

      - name: 运行 Rust 测试
        run: cd src-tauri && cargo test --verbose

      - name: 运行 Rust 测试 (带覆盖率)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          cd src-tauri
          cargo install cargo-tarpaulin
          cargo tarpaulin --out Xml --output-dir ../coverage

      - name: 上传覆盖率报告到 Codecov
        if: matrix.platform == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          files: desktop_app/coverage/cobertura.xml
          flags: backend
          name: backend-coverage

  # E2E 测试
  e2e-tests:
    name: E2E 测试
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: desktop_app/package-lock.json

      - name: 设置 Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust 缓存
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "desktop_app/src-tauri -> target"

      - name: 安装系统依赖 (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev

      - name: 安装依赖
        run: npm ci

      - name: 安装 Playwright
        run: npx playwright install --with-deps

      - name: 构建应用 (调试模式)
        run: npm run tauri:build:debug

      - name: 运行 E2E 测试
        run: npm run test:e2e

      - name: 上传 E2E 测试报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-report-${{ matrix.platform }}
          path: desktop_app/test-results/
          retention-days: 7

  # 构建检查
  build-check:
    name: 构建检查
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: desktop_app/package-lock.json

      - name: 设置 Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust 缓存
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "desktop_app/src-tauri -> target"

      - name: 安装系统依赖 (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev

      - name: 安装依赖
        run: npm ci

      - name: 构建前端
        run: npm run build

      - name: 构建 Rust 后端
        run: cd src-tauri && cargo build --verbose

      - name: 缓存构建产物
        uses: actions/cache@v3
        with:
          path: |
            desktop_app/dist
            desktop_app/src-tauri/target
          key: build-${{ matrix.platform }}-${{ github.sha }}

  # 性能测试
  performance:
    name: 性能测试
    runs-on: ubuntu-latest
    needs: [build-check]
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: desktop_app/package-lock.json

      - name: 安装依赖
        run: npm ci

      - name: 恢复构建缓存
        uses: actions/cache@v3
        with:
          path: |
            desktop_app/dist
            desktop_app/src-tauri/target
          key: build-ubuntu-latest-${{ github.sha }}

      - name: 运行性能测试
        run: |
          npm run build
          # 可以添加更多性能测试脚本
          echo "性能测试完成"

      - name: 分析构建大小
        run: |
          echo "## 📊 构建产物大小分析" >> $GITHUB_STEP_SUMMARY
          echo "### 前端构建产物" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          du -sh dist/* >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # 依赖检查
  dependency-review:
    name: 依赖审查
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 依赖审查
        uses: actions/dependency-review-action@v4
        with:
          base-ref: ${{ github.event.pull_request.base.sha || 'main' }}
          head-ref: ${{ github.event.pull_request.head.sha || github.ref }}

  # 汇总结果
  ci-summary:
    name: CI 汇总
    runs-on: ubuntu-latest
    needs: [code-quality, security, frontend-tests, backend-tests, e2e-tests, build-check, performance]
    if: always()
    steps:
      - name: 检查所有任务状态
        run: |
          echo "## 🚀 CI 执行汇总" >> $GITHUB_STEP_SUMMARY
          echo "| 检查项 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 代码质量检查 | ${{ needs.code-quality.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 安全扫描 | ${{ needs.security.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 前端测试 | ${{ needs.frontend-tests.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 后端测试 | ${{ needs.backend-tests.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E 测试 | ${{ needs.e2e-tests.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 构建检查 | ${{ needs.build-check.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 性能测试 | ${{ needs.performance.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY

      - name: 设置整体状态
        run: |
          if [[ "${{ needs.code-quality.result }}" == "success" && \
                "${{ needs.security.result }}" == "success" && \
                "${{ needs.frontend-tests.result }}" == "success" && \
                "${{ needs.backend-tests.result }}" == "success" && \
                "${{ needs.e2e-tests.result }}" == "success" && \
                "${{ needs.build-check.result }}" == "success" && \
                "${{ needs.performance.result }}" == "success" ]]; then
            echo "🎉 所有检查均通过！代码可以合并。" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "❌ 部分检查失败，请修复后重试。" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi