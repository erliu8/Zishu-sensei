name: Update Check

on:
  schedule:
    # 每天检查一次依赖更新 (UTC 2:00 = 北京时间 10:00)
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: '检查类型'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - npm
          - cargo
          - system

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    working-directory: desktop_app

jobs:
  # NPM 依赖检查
  check-npm-updates:
    name: 检查 NPM 依赖更新
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'npm' || github.event.inputs.check_type == 'all' || github.event_name == 'schedule'
    outputs:
      has_updates: ${{ steps.check.outputs.has_updates }}
      updates: ${{ steps.check.outputs.updates }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: desktop_app/package-lock.json

      - name: 安装 npm-check-updates
        run: npm install -g npm-check-updates

      - name: 检查依赖更新
        id: check
        run: |
          echo "正在检查 NPM 依赖更新..."
          
          # 检查可更新的依赖
          UPDATES=$(ncu --jsonUpgraded --target minor)
          MAJOR_UPDATES=$(ncu --jsonUpgraded --target major)
          
          echo "minor_updates=$UPDATES" >> $GITHUB_OUTPUT
          echo "major_updates=$MAJOR_UPDATES" >> $GITHUB_OUTPUT
          
          # 检查是否有更新
          if [[ "$UPDATES" != "{}" ]] || [[ "$MAJOR_UPDATES" != "{}" ]]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "发现依赖更新"
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "所有依赖都是最新的"
          fi

      - name: 生成更新报告
        if: steps.check.outputs.has_updates == 'true'
        run: |
          echo "## 📦 NPM 依赖更新报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 次版本更新 (兼容)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.check.outputs.minor_updates }}' | jq . >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          echo "### 主版本更新 (可能不兼容)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.check.outputs.major_updates }}' | jq . >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Cargo 依赖检查
  check-cargo-updates:
    name: 检查 Cargo 依赖更新
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'cargo' || github.event.inputs.check_type == 'all' || github.event_name == 'schedule'
    outputs:
      has_updates: ${{ steps.check.outputs.has_updates }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust 缓存
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "desktop_app/src-tauri -> target"

      - name: 安装 cargo-outdated
        run: cargo install cargo-outdated

      - name: 检查依赖更新
        id: check
        run: |
          echo "正在检查 Cargo 依赖更新..."
          cd src-tauri
          
          # 检查过时的依赖
          OUTDATED=$(cargo outdated --format json --root-deps-only || echo '[]')
          
          echo "outdated_deps=$OUTDATED" >> $GITHUB_OUTPUT
          
          # 检查是否有更新
          if [[ "$OUTDATED" != "[]" ]]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "发现 Cargo 依赖更新"
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "所有 Cargo 依赖都是最新的"
          fi

      - name: 生成更新报告
        if: steps.check.outputs.has_updates == 'true'
        run: |
          echo "## 🦀 Cargo 依赖更新报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.check.outputs.outdated_deps }}' | jq . >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # 系统工具检查
  check-system-updates:
    name: 检查系统工具更新
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'system' || github.event.inputs.check_type == 'all' || github.event_name == 'schedule'
    steps:
      - name: 检查工具版本
        run: |
          echo "## 🛠️ 系统工具版本检查" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 工具 | 当前版本 | 最新版本 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|----------|----------|------|" >> $GITHUB_STEP_SUMMARY
          
          # Node.js
          NODE_CURRENT=$(node --version)
          NODE_LATEST=$(curl -s https://nodejs.org/dist/index.json | jq -r '.[0].version')
          NODE_STATUS="✅"
          if [[ "$NODE_CURRENT" != "$NODE_LATEST" ]]; then
            NODE_STATUS="⚠️"
          fi
          echo "| Node.js | $NODE_CURRENT | $NODE_LATEST | $NODE_STATUS |" >> $GITHUB_STEP_SUMMARY
          
          # Rust
          RUST_CURRENT=$(rustc --version | cut -d' ' -f2)
          RUST_LATEST=$(curl -s https://forge.rust-lang.org/infra/channel-releases.html | grep -oP 'Rust \K[0-9]+\.[0-9]+\.[0-9]+' | head -1 || echo "unknown")
          RUST_STATUS="✅"
          if [[ "$RUST_CURRENT" != "$RUST_LATEST" ]] && [[ "$RUST_LATEST" != "unknown" ]]; then
            RUST_STATUS="⚠️"
          fi
          echo "| Rust | $RUST_CURRENT | $RUST_LATEST | $RUST_STATUS |" >> $GITHUB_STEP_SUMMARY
          
          # Tauri CLI
          TAURI_CURRENT=$(npx @tauri-apps/cli --version | cut -d' ' -f2)
          TAURI_LATEST=$(npm view @tauri-apps/cli version)
          TAURI_STATUS="✅"
          if [[ "$TAURI_CURRENT" != "$TAURI_LATEST" ]]; then
            TAURI_STATUS="⚠️"
          fi
          echo "| Tauri CLI | $TAURI_CURRENT | $TAURI_LATEST | $TAURI_STATUS |" >> $GITHUB_STEP_SUMMARY

  # 安全审计
  security-audit:
    name: 安全审计
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event_name == 'schedule'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: desktop_app/package-lock.json

      - name: 设置 Rust
        uses: dtolnay/rust-toolchain@stable

      - name: 安装依赖
        run: npm ci

      - name: NPM 安全审计
        run: |
          echo "## 🔒 安全审计报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # NPM 审计
          echo "### NPM 安全审计" >> $GITHUB_STEP_SUMMARY
          if npm audit --audit-level moderate --format json > npm-audit.json; then
            echo "✅ NPM 审计通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ 发现安全问题:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat npm-audit.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Cargo 安全审计
        run: |
          # 安装 cargo-audit
          cargo install cargo-audit
          
          echo "### Cargo 安全审计" >> $GITHUB_STEP_SUMMARY
          cd src-tauri
          if cargo audit --format json > ../cargo-audit.json; then
            echo "✅ Cargo 审计通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ 发现安全问题:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat ../cargo-audit.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

  # 创建更新 PR
  create-update-pr:
    name: 创建依赖更新 PR
    runs-on: ubuntu-latest
    needs: [check-npm-updates, check-cargo-updates]
    if: needs.check-npm-updates.outputs.has_updates == 'true' || needs.check-cargo-updates.outputs.has_updates == 'true'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 设置 Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: 创建更新分支
        run: |
          BRANCH_NAME="deps/automated-updates-$(date +%Y%m%d)"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: desktop_app/package-lock.json

      - name: 更新 NPM 依赖
        if: needs.check-npm-updates.outputs.has_updates == 'true'
        run: |
          npm install -g npm-check-updates
          
          # 只更新次版本和补丁版本 (安全)
          ncu --upgrade --target minor
          npm install
          
          git add package.json package-lock.json
          git commit -m "chore: update npm dependencies (minor/patch)" || true

      - name: 更新 Cargo 依赖
        if: needs.check-cargo-updates.outputs.has_updates == 'true'
        run: |
          cd src-tauri
          
          # 更新 Cargo.lock
          cargo update
          
          git add Cargo.lock
          git commit -m "chore: update cargo dependencies" || true

      - name: 运行测试
        run: |
          npm run test:run
          npm run test:rust

      - name: 推送分支并创建 PR
        run: |
          git push origin $BRANCH_NAME
          
          # 创建 PR
          gh pr create \
            --title "🔄 自动依赖更新 $(date +%Y-%m-%d)" \
            --body "## 📦 自动依赖更新

          这是一个自动创建的 PR，用于更新项目依赖。

          ### 📋 更新内容
          - 🟢 安全的次版本和补丁版本更新
          - 🔒 已通过安全审计
          - ✅ 所有测试已通过

          ### 🔍 审查要点
          - [ ] 检查更新日志中的破坏性变更
          - [ ] 验证功能是否正常
          - [ ] 确认测试覆盖率

          ### 🤖 自动化信息
          - 创建时间: $(date)
          - 触发方式: 定时任务
          - 工作流: ${{ github.workflow }}

          如有问题，请联系维护团队。" \
            --label "dependencies,automated" \
            --assignee ${{ github.actor }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 通知结果
  notify-results:
    name: 通知检查结果
    runs-on: ubuntu-latest
    needs: [check-npm-updates, check-cargo-updates, security-audit, create-update-pr]
    if: always()
    steps:
      - name: 汇总检查结果
        run: |
          echo "## 📊 依赖检查汇总" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 检查项 | 状态 | 结果 |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| NPM 依赖 | ${{ needs.check-npm-updates.result == 'success' && '✅' || '❌' }} | ${{ needs.check-npm-updates.outputs.has_updates == 'true' && '有更新' || '无更新' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Cargo 依赖 | ${{ needs.check-cargo-updates.result == 'success' && '✅' || '❌' }} | ${{ needs.check-cargo-updates.outputs.has_updates == 'true' && '有更新' || '无更新' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 安全审计 | ${{ needs.security-audit.result == 'success' && '✅' || needs.security-audit.result == 'skipped' && '⏭️' || '❌' }} | ${{ needs.security-audit.result == 'success' && '通过' || needs.security-audit.result == 'skipped' && '跳过' || '失败' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.create-update-pr.result }}" == "success" ]]; then
            echo "| 更新 PR | ✅ | 已创建 |" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.create-update-pr.result }}" == "skipped" ]]; then
            echo "| 更新 PR | ⏭️ | 无需创建 |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 更新 PR | ❌ | 创建失败 |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "检查完成时间: $(date)" >> $GITHUB_STEP_SUMMARY
