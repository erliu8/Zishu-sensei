name: Deploy

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: '部署版本 (留空使用最新)'
        required: false
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  # 部署到更新服务器
  deploy-update-server:
    name: 部署到更新服务器
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 获取版本信息
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
            RELEASE_ID="${{ github.event.release.id }}"
          else
            VERSION="${{ github.event.inputs.version }}"
            if [[ -z "$VERSION" ]]; then
              VERSION=$(gh release view --json tagName -q .tagName)
            fi
            RELEASE_ID=$(gh release view $VERSION --json id -q .id)
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
          echo "deployment_env=${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_OUTPUT
          
          echo "部署版本: $VERSION"
          echo "部署环境: ${{ github.event.inputs.environment || 'production' }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 获取发布资产信息
        id: assets
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # 获取发布资产列表
          ASSETS=$(gh release view $VERSION --json assets -q '.assets[] | {name: .name, url: .browserDownloadUrl, size: .size}')
          
          echo "assets<<EOF" >> $GITHUB_OUTPUT
          echo "$ASSETS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 更新版本信息到服务器
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          ENV="${{ steps.version.outputs.deployment_env }}"
          
          # 构建更新信息
          UPDATE_INFO=$(cat << EOF
          {
            "version": "$VERSION",
            "environment": "$ENV",
            "released_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "release_notes": ${{ toJson(github.event.release.body || '新版本发布') }},
            "platforms": {
              "windows-x64": {
                "url": "https://github.com/${{ github.repository }}/releases/download/$VERSION/zishu-sensei_${VERSION}_x64.msi",
                "signature": ""
              },
              "windows-arm64": {
                "url": "https://github.com/${{ github.repository }}/releases/download/$VERSION/zishu-sensei_${VERSION}_arm64.msi",
                "signature": ""
              },
              "macos-x64": {
                "url": "https://github.com/${{ github.repository }}/releases/download/$VERSION/zishu-sensei_${VERSION}_x64.dmg",
                "signature": ""
              },
              "macos-arm64": {
                "url": "https://github.com/${{ github.repository }}/releases/download/$VERSION/zishu-sensei_${VERSION}_arm64.dmg",
                "signature": ""
              },
              "linux-x64": {
                "url": "https://github.com/${{ github.repository }}/releases/download/$VERSION/zishu-sensei_${VERSION}_x64.deb",
                "signature": ""
              }
            }
          }
          EOF
          )
          
          # 发送到更新服务器
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.UPDATE_SERVER_TOKEN }}" \
            -d "$UPDATE_INFO" \
            "${{ vars.UPDATE_SERVER_URL }}/api/releases" || {
              echo "更新服务器通知失败，但不影响部署"
              exit 0
            }
          
          echo "✅ 更新服务器已更新版本信息"

  # 部署到 CDN
  deploy-cdn:
    name: 部署到 CDN
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    if: github.event.inputs.environment == 'production' || github.event_name == 'release'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 获取版本信息
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="${{ github.event.inputs.version }}"
            if [[ -z "$VERSION" ]]; then
              VERSION=$(gh release view --json tagName -q .tagName)
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 下载发布资产
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # 创建下载目录
          mkdir -p downloads
          
          # 下载所有发布资产
          gh release download $VERSION --dir downloads --pattern "*.msi"
          gh release download $VERSION --dir downloads --pattern "*.exe"
          gh release download $VERSION --dir downloads --pattern "*.dmg"
          gh release download $VERSION --dir downloads --pattern "*.deb"
          gh release download $VERSION --dir downloads --pattern "*.rpm"
          gh release download $VERSION --dir downloads --pattern "*.AppImage"
          gh release download $VERSION --dir downloads --pattern "*.tar.gz"
          gh release download $VERSION --dir downloads --pattern "checksums.txt"
          
          echo "下载的文件:"
          ls -la downloads/
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 配置 AWS CLI
        if: secrets.AWS_ACCESS_KEY_ID != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: 上传到 S3
        if: secrets.AWS_ACCESS_KEY_ID != ''
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          BUCKET="${{ vars.S3_BUCKET }}"
          
          # 上传文件到 S3
          aws s3 sync downloads/ s3://$BUCKET/releases/$VERSION/ \
            --exclude "*" \
            --include "*.msi" \
            --include "*.exe" \
            --include "*.dmg" \
            --include "*.deb" \
            --include "*.rpm" \
            --include "*.AppImage" \
            --include "*.tar.gz" \
            --include "checksums.txt" \
            --cache-control "max-age=31536000"
          
          # 更新最新版本索引
          echo "$VERSION" | aws s3 cp - s3://$BUCKET/latest.txt \
            --cache-control "max-age=300"
          
          echo "✅ 文件已上传到 CDN"

      - name: 清除 CloudFront 缓存
        if: secrets.AWS_ACCESS_KEY_ID != '' && vars.CLOUDFRONT_DISTRIBUTION_ID != ''
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/releases/*" "/latest.txt"
          
          echo "✅ CDN 缓存已清除"

  # 部署文档
  deploy-docs:
    name: 部署文档
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: docs/package-lock.json

      - name: 检查文档目录
        run: |
          if [[ -d "docs" ]] && [[ -f "docs/package.json" ]]; then
            echo "found_docs=true" >> $GITHUB_ENV
          else
            echo "found_docs=false" >> $GITHUB_ENV
            echo "未找到文档目录，跳过文档部署"
          fi

      - name: 构建文档
        if: env.found_docs == 'true'
        run: |
          cd docs
          npm ci
          npm run build

      - name: 部署到 GitHub Pages
        if: env.found_docs == 'true'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/dist
          cname: docs.zishu.dev

  # 通知部署结果
  notify-deployment:
    name: 通知部署结果
    runs-on: ubuntu-latest
    needs: [deploy-update-server, deploy-cdn, deploy-docs]
    if: always()
    steps:
      - name: 汇总部署结果
        run: |
          VERSION="${{ needs.deploy-update-server.outputs.version || github.event.release.tag_name }}"
          ENV="${{ github.event.inputs.environment || 'production' }}"
          
          echo "## 🚀 部署结果汇总" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**版本**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**环境**: $ENV" >> $GITHUB_STEP_SUMMARY
          echo "**时间**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 部署项 | 状态 | 结果 |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 更新服务器 | ${{ needs.deploy-update-server.result == 'success' && '✅' || '❌' }} | ${{ needs.deploy-update-server.result == 'success' && '成功' || '失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CDN 部署 | ${{ needs.deploy-cdn.result == 'success' && '✅' || needs.deploy-cdn.result == 'skipped' && '⏭️' || '❌' }} | ${{ needs.deploy-cdn.result == 'success' && '成功' || needs.deploy-cdn.result == 'skipped' && '跳过' || '失败' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 文档部署 | ${{ needs.deploy-docs.result == 'success' && '✅' || needs.deploy-docs.result == 'skipped' && '⏭️' || '❌' }} | ${{ needs.deploy-docs.result == 'success' && '成功' || needs.deploy-docs.result == 'skipped' && '跳过' || '失败' }} |" >> $GITHUB_STEP_SUMMARY

      - name: 发送成功通知
        if: needs.deploy-update-server.result == 'success'
        run: |
          VERSION="${{ needs.deploy-update-server.outputs.version || github.event.release.tag_name }}"
          ENV="${{ github.event.inputs.environment || 'production' }}"
          
          # Discord 通知
          if [[ -n "${{ secrets.DISCORD_WEBHOOK }}" ]]; then
            curl -X POST \
              -H "Content-Type: application/json" \
              -d '{
                "embeds": [{
                  "title": "🚀 部署成功",
                  "description": "**Zishu Sensei '$VERSION'** 已成功部署到 **'$ENV'** 环境",
                  "color": 3066993,
                  "fields": [
                    {
                      "name": "版本",
                      "value": "'$VERSION'",
                      "inline": true
                    },
                    {
                      "name": "环境", 
                      "value": "'$ENV'",
                      "inline": true
                    },
                    {
                      "name": "时间",
                      "value": "'$(date)'",
                      "inline": true
                    }
                  ],
                  "footer": {
                    "text": "Zishu Sensei CI/CD"
                  }
                }]
              }' \
              "${{ secrets.DISCORD_WEBHOOK }}" || echo "Discord 通知发送失败"
          fi
          
          # Telegram 通知
          if [[ -n "${{ secrets.TELEGRAM_BOT_TOKEN }}" ]] && [[ -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]]; then
            curl -X POST \
              -H "Content-Type: application/json" \
              -d '{
                "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
                "text": "🚀 *Zishu Sensei '$VERSION'* 部署成功\n\n📦 版本: `'$VERSION'`\n🌍 环境: `'$ENV'`\n⏰ 时间: `'$(date)'`",
                "parse_mode": "Markdown"
              }' \
              "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" || echo "Telegram 通知发送失败"
          fi

      - name: 发送失败通知
        if: needs.deploy-update-server.result == 'failure' || needs.deploy-cdn.result == 'failure'
        run: |
          VERSION="${{ needs.deploy-update-server.outputs.version || github.event.release.tag_name }}"
          ENV="${{ github.event.inputs.environment || 'production' }}"
          
          # Discord 通知
          if [[ -n "${{ secrets.DISCORD_WEBHOOK }}" ]]; then
            curl -X POST \
              -H "Content-Type: application/json" \
              -d '{
                "embeds": [{
                  "title": "❌ 部署失败",
                  "description": "**Zishu Sensei '$VERSION'** 部署到 **'$ENV'** 环境失败",
                  "color": 15158332,
                  "fields": [
                    {
                      "name": "版本",
                      "value": "'$VERSION'",
                      "inline": true
                    },
                    {
                      "name": "环境",
                      "value": "'$ENV'",
                      "inline": true
                    },
                    {
                      "name": "工作流",
                      "value": "[查看详情](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                      "inline": false
                    }
                  ],
                  "footer": {
                    "text": "请检查构建日志并修复问题"
                  }
                }]
              }' \
              "${{ secrets.DISCORD_WEBHOOK }}" || echo "Discord 通知发送失败"
          fi

  # 创建部署标签
  create-deployment-tag:
    name: 创建部署标签
    runs-on: ubuntu-latest
    needs: [deploy-update-server]
    if: needs.deploy-update-server.result == 'success'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 创建部署标签
        run: |
          VERSION="${{ needs.deploy-update-server.outputs.version || github.event.release.tag_name }}"
          ENV="${{ github.event.inputs.environment || 'production' }}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          
          DEPLOY_TAG="deploy-${ENV}-${VERSION}-${TIMESTAMP}"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git tag -a $DEPLOY_TAG -m "Deploy $VERSION to $ENV at $(date)"
          git push origin $DEPLOY_TAG
          
          echo "✅ 已创建部署标签: $DEPLOY_TAG"